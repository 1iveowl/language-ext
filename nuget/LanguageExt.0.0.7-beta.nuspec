<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
    <metadata>
        <id>LanguageExt</id>
        <version>0.0.7-beta</version>
        <title>C# Functional Language Extensions</title>
        <authors>Paul Louth</authors>
        <licenseUrl>https://github.com/louthy/language-ext/blob/master/LICENSE.md</licenseUrl>
        <projectUrl>https://github.com/louthy/language-ext</projectUrl>
        <iconUrl>http://www.4four.org/images/lang-ext-logo.png</iconUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>Using and abusing the features of C# 6 to provide lots of helper functions and types, which, if you squint, can look like extensions to the language itself. 

This package brings functional helpers for classic C# problems:

Poor tuple support
Null reference problem
Lack of lambda and expression inference
Void isn't a real type
Mutable lists and dictionaries
The awful 'out' parameter</description>
        <summary />
        <releaseNotes>List pattern matching:

        public int Sum(IEnumerable&lt;int&gt; list) =&gt;
            match( list,
                   ()      =&gt; 0,
                   x       =&gt; x,
                   (x, xs) =&gt; x + Sum(xs) );
Extension methods for lifting Option, OptionUnsafe, Either, EitherUnsafe when wrapped by an IEnumerable.

TryOption&lt;T&gt;.AsEnumerable() now returns an IEnumerable&lt;Either&lt;T,Exception&gt;&gt; instead of burying the Exception as an empty list. The extension methods above can be used to easily extract the value from the IEnumerable&lt;Either&lt;T,Exception&gt;&gt;. This puts control back in the programmer's hands about what to do with the possible failed state of the TryOption.

e.g.

            // Ignore all errors, and return an empty list
            var res = (from v in GetTryOptionError().AsEnumerable().FailWithEmpty()
                       from r in range(1, 10)
                       select v * r);

            // Ignore the errors and provide a sensible default
            var res = (from v in GetTryOptionValue(false).AsEnumerable().Failure( list(1) )
                       from r in range(1, 10)
                       select v * r);

            // Recognise the error, and throw
            var res = (from v in match( 
                                     GetTryOptionValue(true).AsEnumerable(), 
                                     Right: r =&gt; list(r),
                                     Left:  ex =&gt; failwith&lt;int&gt;("broken: " + ex.Message)
                                 )
                       from r in range(1, 10)
                       select v * r);</releaseNotes>
        <tags>C# Functional Language Extension</tags>
        <dependencies>
            <group targetFramework=".NETFramework4.5">
                <dependency id="System.Collections.Immutable" version="1.1.32-beta" />
            </group>
        </dependencies>
        <frameworkAssemblies>
            <frameworkAssembly assemblyName="System" targetFramework="" />
        </frameworkAssemblies>
    </metadata>
    <files>
        <file src="content\ConcurrentHashtable.License.txt" target="content\ConcurrentHashtable.License.txt" />
        <file src="lib\ConcurrentHashtable.dll" target="lib\ConcurrentHashtable.dll" />
        <file src="..\lib\LanguageExt.Core.dll" target="lib\LanguageExt.Core.dll" />
    </files>
</package>
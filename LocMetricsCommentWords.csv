Word,Count
/,147385
the,61313
of,31910
<param,31088
bound,28373
to,27090
value,24963
<typeparam,23709
<summary>,19377
</summary>,19238
type</typeparam>,19040
is,16455
operation,14308
\name="\A"\>Inner\,12170
inner,8193
operation</param>,7913
side,7876
perform,7841
on</param>,7745
\name="\ma"\>The\,7741
hand,7706
result,7173
which,6821
function,6741
predicate,6728
then,6341
a,6273
\name="\f"\>The\,6199
performing,6125
and,5924
state,5677
values,5573
in,5440
if,5065
`f`,5006
true,4954
aggregate,4848
apply</param>,4561
value(s),4534
If,4471
left,3841
\name="\x"\>The\,3767
right,3741
\name="\y"\>The\,3629
class,3537
types,3496
instance</typeparam>,3455
bind,3227
are,3206
\name="\B"\>Resulting\,3192
A&gt;&gt;`,3045
an,2890
all,2888
new,2795
return,2689
type,2535
when,2527
function</param>,2443
applied,2435
(which,2334
that,2177
whilst,2153
nested,2109
by,2090
no,2056
map,2050
there,2003
with,2001
Finds,1984
`x`,1982
y`</returns>,1972
`x,1972
\name="\NUM"\>`Num<A>`\,1972
two,1957
on,1929
applying,1869
mapping,1869
<returns>The,1824
x,1690
This,1625
`f(a)`</returns>,1601
<returns>True,1555
returns,1546
Returns,1539
it,1506
`Num<A>`,1479
`y`:,1479
`Num<A>`s,1479
any,1375
Monadic,1344
Apply,1319
returned,1297
\name="\S"\>Aggregate\,1294
Create,1287
produce,1284
item,1259
than,1253
folding,1252
compare,1221
using,1209
for,1187
monadic,1187
\type,\,1170
returned)</returns>,1166
returned),1166
traversing,1166
provided,1165
items,1163
from,1121
false,1113
y</returns>,1083
Applies,1079
applied</returns>,1059
or,1045
rules,1043
filtered,1031
out,1030
returned.</returns>,1020
Filter,1015
else,1011
`fa`,986
\name="\fa"\>Monad\,986
\retained,\,979
`f(a)`,979
So,977
maps,953
Takes,952
apply,949
\`A`,\,947
'flips',946
maintaining,946
outer,946
traverses,946
Functor,908
monads,906
state</param>,854
\`Either&lt;L,\,848
\`EitherUnsafe&lt;L,\,848
\`Validation&lt;FAIL,\,848
computation,846
None,765
B&gt;&gt;`,701
Either,663
number,640
<returns>If,639
list,637
action,636
(in,627
between,626
less,619
greater,618
Some,614
-,605
==,604
product,595
bind</param>,594
+,592
as,592
same,590
direction,586
after,586
project,585
both,584
opposite,583
`Fold`),583
projection,581
`a`,581
\name="\project"\>The\,576
project</returns>,576
\name="\C"\>Resulting\,576
\name="\B"\>Intermediate\,576
\name="\bind"\>The\,576
append,575
equal,563
Semigroup,554
contains,542
sum,531
*,526
this,521
iterate,521
(by,518
Traverse,518
`f`),518
difference,511
\`EitherAsync&lt;L,\,509
Try,506
total,506
++,502
<returns>Number,502
count,502
together,501
invoke,501
The,501
Adds,496
Divides,496
`-1`,495
<returns>Total,495
\name="\fab"\>Functor</param>\,493
\name="\ORD"\>`Ord<A>`\,493
fb)`</returns>,493
`fb`,493
`A`s,493
`0`</returns>,493
Side-effecting,493
`fabc`,493
`Ord`,493
`+1`,493
\name="\EQ"\>`Eq<A>`\,493
`Eq`,493
`fab(fa)`</returns>,493
`fab`,493
\`fabc(fa,\,493
\`y`,\,493
\name="\fabc"\>Functor</param>\,493
\name="\SEMI"\>`Semigroup<A>`\,493
\name="\fb"\>Monad\,493
side-effects</param>,493
be,488
\<returns>`Either&lt;L,\,487
\<returns>`Validation&lt;FAIL,\,487
\<returns>`EitherUnsafe&lt;L,\,487
first,482
Option,476
into,450
Right,448
calling,444
\A,\,444
A>(identity)`,428
Sequence,428
equality,413
True,412
one,405
y,404
sequence,396
element,396
`true`,396
value</typeparam>,387
<exception,383
not,381
<returns>New,374
Atomically,373
set,365
Left,361
\<returns>`EitherAsync&lt;L,\,343
A&gt;&gt;`</param>,333
match,330
code,326
=,321
A&gt;&gt;`</returns>,320
\name="\state"\>Initial\,311
keys,305
:,302
enumerable,302
Map,297
binary,291
value</returns>,288
\Either&lt;L,\,287
\EitherUnsafe&lt;L,\,287
\Validation&lt;FAIL,\,287
operator,286
Fail,282
A,281
can,273
tuple,260
each,259
`ma.Traverse<,256
\operator,\,256
0,254
<returns>Mapped,253
states,251
state</returns>,250
1,246
second,246
</returns>,243
null</exception>,240
expression,238
\state,\,234
\EitherAsync&lt;L,\,230
R,229
\list,\,226
elements,225
Convert,221
\name="\L"\>Left</typeparam>\,221
key,220
Equality,220
<returns>Applicative,219
\name="\fa"\>Applicative\,217
Get,217
\function,\,217
to</param>,214
\name="\A"\>Bound\,214
\name="\R"\>Right</typeparam>\,212
\A&gt;&gt;`,\,210
applicative,209
test,209
<returns>An,209
derived,208
zero,207
monad,206
otherwise,205
Applicative,203
resulting,202
value</param>,202
<returns>A,196
added</returns>,194
either,194
hash,193
'folder',192
structure,189
Match,189
\name="\fab"\>Function\,188
already,186
matches,183
Seq&lt;A&gt;&gt;`,178
TryOption&lt;A&gt;&gt;`,178
Try&lt;A&gt;&gt;`,178
Set&lt;A&gt;&gt;`,178
Arr&lt;A&gt;&gt;`,178
Option&lt;A&gt;&gt;`,178
HashSet&lt;A&gt;&gt;`,178
OptionUnsafe&lt;A&gt;&gt;`,178
Lst&lt;A&gt;&gt;`,178
\name="\self"\>Try\,175
ArgumentNullException,174
\cref="\ArgumentNullException"\>Throws\,174
argument,174
equal</returns>,172
case,172
For,170
completes,169
\name="\pred"\>Predicate</param>\,166
\name="\A"\>Type\,165
bigint,165
will,165
stack,164
<para>,162
</para>,162
IEnumerable&lt;A&gt;&gt;`,162
\name="\Fail"\>Delegate\,161
allowed,160
<remarks>Null,158
Invokes,158
IEnumerable,158
parser,157
input,156
application,156
range,154
option,154
computation</param>,153
conditional,151
Task&lt;A&gt;&gt;`,151
TryOptionAsync&lt;A&gt;&gt;`,151
TryAsync&lt;A&gt;&gt;`,151
OptionAsync&lt;A&gt;&gt;`,151
computation</returns>,150
adds,150
OptionUnsafe,149
=>,146
x</returns>,145
fold</param>,144
type-class,143
Maps,143
invoking,142
Return,140
set</returns>,140
var,137
right:,137
set</param>,137
Key,136
\name="\x"\>Left\,136
Value</remarks>,136
\name="\y"\>Right\,136
so,134
In,132
rhs</returns>,132
Find,131
Pattern,131
<returns>Returns,131
immutable,131
sets,131
fails</param>,130
applies,130
through,130
\operator),\,128
starting,128
value(typically,128
lists,128
\lists,\,128
it's,128
reduces,128
use,128
</remarks><returns>,127
\name="\S"\>State\,127
C&gt;&gt;`,126
Compare,124
left-identity,124
False,124
EitherUnsafe,124
but,124
</summary><remarks>,124
Lst,124
->,122
possible,121
\`ma.Traverse<L,\,121
another,121
<returns>,121
B&gt;&gt;`</returns>,118
last,117
otherwise</returns>,117
Some(x),115
add</param>,114
integer,114
Validation,114
takes,114
like,114
running,113
head,113
behaviour,111
successfully</param>,111
ignored,110
supplied,110
\name="\T"\>Type\,108
\name="\folder"\>Fold\,108
p,108
Note,108
add,108
\name="\key"\>Key\,108
\'Fold',\,107
\name="\range"\>Range\,106
\name="\self"\>Either\,105
</para><para>,105
Cond,105
non-null,105
fails,105
exist,105
item-map,104
otherwise.</returns>,104
ArgumentException,104
\cref="\ArgumentException"\>Throws\,104
they're,102
output,100
final,99
follow,99
of</param>,98
delegate,98
<returns>Folded,98
------------------------------------------------------------------------------,98
T,96
null.</param>,96
b,95
null,95
doesn't,95
holds,95
optional,95
instance,94
\name="\T"\>Element\,94
f(b,94
functor,94
\name="\R"\>Type\,93
empty,93
exception,93
C></returns>,92
example,92
c),92
order,92
\Func<B,\,92
results,91
produced,91
therefore,91
passed,91
\value,\,91
Partially,90
\name="\rhs"\>Right-hand\,89
</example>,89
threading,88
hash-code,88
-1,88
<returns>Aggregate,88
\Then,\,88
along,88
since,88
equivalent,87
<example>,87
\items,\,86
infinite,86
uses,86
L,85
Add,85
Take,85
\name="\Some"\>Delegate\,84
It,84
<returns>lhs,84
\that,\,84
Calculates,84
\name="\key"\>Key</param>\,84
An,83
All,83
'Fold',83
terminating,83
2,83
\argument,\,82
call,81
\name="\pred"\>Predicate\,81
\name="\lhs"\>Left-hand\,81
lhs,81
\name="\Succ"\>Delegate\,81
equals,80
Iterate,80
Project,80
provide,80
whether,80
must,80
Folds,80
find</param>,78
unwrapped,78
list</param>,78
OptionAsync,78
object,77
\name="\None"\>None\,77
mapped,77
\name="\fb"\>Applicative\,77
\name="\Some"\>Some\,77
{,76
\element,\,76
subtract,76
https://en.wikipedia.org/wiki/Fold_(higher-order_function),76
<returns>Hash,76
S,76
test</param>,76
extracted,75
you,75
tuples,75
three,75
\name="\None"\>Operation\,75
type</param>,75
series,74
representation,74
desired,74
map</returns>,74
\name="\value"\>Value\,74
constructor,74
Success,74
B</returns>,74
\name="\T"\>Enumerable\,74
delegate</returns>,73
back,72
\name="\value"\>Value</param>\,72
length,72
Construct,72
hyperbolic,72
Retrieve,71
array,71
\name="\None"\>Delegate\,71
Fold,71
Ctor,71
string,71
depending,70
get,70
functions,70
specified,69
conversion,68
numeric,68
fold,68
Exception,67
Monoid,67
Trys,67
other,67
computation</typeparam>,67
'Left',66
'Right',66
Invoke,66
\y,\,65
\name="\x"\>Value\,65
generate,65
<returns>Unit</returns>,65
matching,65
successfully,64
feeds,64
\name="\items"\>Items\,64
map</param>,64
</remarks>,63
existence,63
interface,62
indicates,62
operation</returns>,62
observable,62
default,61
ordering,61
\name="\self"\>The\,61
functor</returns>,61
items</returns>,61
\name="\list"\>Enumerable\,61
Projection,61
collection,61
\None,\,60
enumerable</returns>,60
index,60
'Either',60
Monad,60
\Succ,\,59
run,59
LINQ),58
\name="\T"\>Stack\,58
arguments,58
ImmutableArray,58
evaluate,58
values</param>,58
},58
\name="\A"\>The\,57
nothing,57
A</returns>,57
based,57
\name="\B"\>Type\,57
where,57
accumulator,56
arity,56
None(),56
\cref="\Exception"\>Throws\,56
more,56
left:,55
supplied.</returns>,54
\exists,\,54
FB,54
may,54
only,53
value:,53
its,53
\`Set&lt;EitherUnsafe&lt;L,\,52
\`TryOption&lt;Either&lt;L,\,52
\`Option&lt;Validation&lt;FAIL,\,52
\`HashSet&lt;EitherUnsafe&lt;L,\,52
\`Arr&lt;EitherUnsafe&lt;L,\,52
\`Seq&lt;EitherUnsafe&lt;L,\,52
\`Lst&lt;Validation&lt;FAIL,\,52
\`Arr&lt;Either&lt;L,\,52
\`Lst&lt;Either&lt;L,\,52
\`OptionUnsafe&lt;Either&lt;L,\,52
has,52
\`Try&lt;EitherUnsafe&lt;L,\,52
\`Try&lt;Validation&lt;FAIL,\,52
\`IEnumerable&lt;Validation&lt;FAIL,\,52
\`OptionUnsafe&lt;EitherUnsafe&lt;L,\,52
\`Option&lt;Either&lt;L,\,52
\`TryOption&lt;Validation&lt;FAIL,\,52
\`Lst&lt;EitherUnsafe&lt;L,\,52
concat,52
\`Try&lt;Either&lt;L,\,52
\`IEnumerable&lt;Either&lt;L,\,52
check</param>,52
\`Seq&lt;Either&lt;L,\,52
\name="\Fail"\>Fold\,52
\`Option&lt;EitherUnsafe&lt;L,\,52
\`HashSet&lt;Validation&lt;FAIL,\,52
\`TryOption&lt;EitherUnsafe&lt;L,\,52
\`Arr&lt;Validation&lt;FAIL,\,52
\`HashSet&lt;Either&lt;L,\,52
\`Seq&lt;Validation&lt;FAIL,\,52
\name="\B"\>Return\,52
parses,52
\`Set&lt;Validation&lt;FAIL,\,52
\`Set&lt;Either&lt;L,\,52
\`OptionUnsafe&lt;Validation&lt;FAIL,\,52
\`IEnumerable&lt;EitherUnsafe&lt;L,\,52
You,51
\otherwise,\,51
\`ma.Traverse<FAIL,\,51
</param>,51
provides,51
current,51
Extracts,51
Must,50
\name="\Some"\>Operation\,50
top,50
Try(x),50
setB,50
Try(y),50
WriteCodeFragment,49
Generated,49
fluent,49
existing,49
should,49
MSBuild,49
\name="\either"\>Either\,49
<auto-generated>,49
</auto-generated>,49
TryAsync,49
useful,49
returning,49
inference,49
Set,49
component,49
at,49
up,48
find,48
Success</param>,48
convert,48
A</typeparam>,48
Failure</param>,48
predicate</param>,48
superset,48
Product,48
<returns></returns>,48
Append,48
x),48
exist</exception>,48
public,48
'other',48
FC,48
C</returns>,48
Better,48
<remarks>Will,47
f,47
\name="\R"\>The\,47
Succ,47
(from,47
source,47
\name="\T"\>sequence\,47
structure</returns>,47
KeyValuePairs,46
Is,46
we,46
override,46
Divide,45
return</typeparam>,45
Sum,45
used,45
\name="\y"\>right\,45
<remarks>,45
without,45
\name="\f"\>Function\,45
\name="\x"\>left\,45
removed</returns>,44
function</remarks>,44
documentation,44
invoked,44
Partial,44
Generate,44
patch,44
<remarks>TODO:,44
order),44
character,44
use</param>,44
<returns>Result,43
TryOption&lt;B&gt;&gt;`,43
Lst&lt;B&gt;&gt;`,43
bitwise,43
HashSet&lt;B&gt;&gt;`,43
Option&lt;B&gt;&gt;`,43
OptionUnsafe&lt;B&gt;&gt;`,43
Set&lt;B&gt;&gt;`,43
Try&lt;B&gt;&gt;`,43
Arr&lt;B&gt;&gt;`,43
Seq&lt;B&gt;&gt;`,43
stream,42
state),42
\name="\action"\>Action\,42
\name="\rhs"\>The\,42
\name="\lhs"\>The\,42
64-bit,42
system,42
against</param>,42
serialisation,42
aren't,41
called,41
TryOptionAsync,41
bottom,41
Nullable,41
being,41
put,41
L</returns>,40
\name="\Some"\>Folder\,40
\name="\self"\>computation</param>\,40
\name="\None"\>Folder\,40
*any*,40
map</exception>,40
\`Task&lt;EitherAsync&lt;L,\,40
was,40
signed,40
Tuples,40
foldable</param>,40
transformer,40
proper,40
Comparison,40
tree,40
allows,40
would,40
\`TryAsync&lt;EitherAsync&lt;L,\,40
instead,40
\`OptionAsync&lt;EitherAsync&lt;L,\,40
functions</param>,40
\`TryOptionAsync&lt;EitherAsync&lt;L,\,40
compare</param>,39
IEnumerable&lt;B&gt;&gt;`,39
accept,39
don't,38
Tests,38
method,38
\name="\list"\>sequence\,38
check,38
May,38
T</returns>,38
\exist,\,38
Represents,38
setA,38
behavior,37
have,37
working,37
area,37
Func,37
Action,37
cause,37
parameter,37
`Arr&lt;Lst&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Option&lt;A&gt;&gt;`,36
`Try&lt;Lst&lt;A&gt;&gt;`,36
`Option&lt;Lst&lt;A&gt;&gt;`,36
`Try&lt;TryOption&lt;A&gt;&gt;`,36
`Lst&lt;Option&lt;A&gt;&gt;`,36
`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Try&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Lst&lt;Arr&lt;A&gt;&gt;`,36
`Seq&lt;Set&lt;A&gt;&gt;`,36
`Lst&lt;Lst&lt;A&gt;&gt;`,36
`IEnumerable&lt;Seq&lt;A&gt;&gt;`,36
`IEnumerable&lt;Set&lt;A&gt;&gt;`,36
generated,36
`Seq&lt;TryOption&lt;A&gt;&gt;`,36
`TryOption&lt;Arr&lt;A&gt;&gt;`,36
`Try&lt;Seq&lt;A&gt;&gt;`,36
`HashSet&lt;HashSet&lt;A&gt;&gt;`,36
`Seq&lt;Lst&lt;A&gt;&gt;`,36
`Arr&lt;TryOption&lt;A&gt;&gt;`,36
`Set&lt;Arr&lt;A&gt;&gt;`,36
`Try&lt;HashSet&lt;A&gt;&gt;`,36
`Arr&lt;HashSet&lt;A&gt;&gt;`,36
`Option&lt;Set&lt;A&gt;&gt;`,36
`Lst&lt;HashSet&lt;A&gt;&gt;`,36
functionality,36
`Seq&lt;Seq&lt;A&gt;&gt;`,36
`Option&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Arr&lt;Arr&lt;A&gt;&gt;`,36
`TryOption&lt;Seq&lt;A&gt;&gt;`,36
`Seq&lt;Option&lt;A&gt;&gt;`,36
`Try&lt;Option&lt;A&gt;&gt;`,36
`Option&lt;HashSet&lt;A&gt;&gt;`,36
`Seq&lt;HashSet&lt;A&gt;&gt;`,36
`Arr&lt;Set&lt;A&gt;&gt;`,36
return</param>,36
`TryOption&lt;Try&lt;A&gt;&gt;`,36
`Arr&lt;Try&lt;A&gt;&gt;`,36
`Set&lt;Lst&lt;A&gt;&gt;`,36
Async,36
`Option&lt;TryOption&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`,36
<returns>Found,36
`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Set&lt;Set&lt;A&gt;&gt;`,36
`Try&lt;Try&lt;A&gt;&gt;`,36
`TryOption&lt;Set&lt;A&gt;&gt;`,36
`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`Option&lt;Option&lt;A&gt;&gt;`,36
`TryOption&lt;Lst&lt;A&gt;&gt;`,36
`Option&lt;Seq&lt;A&gt;&gt;`,36
`HashSet&lt;Lst&lt;A&gt;&gt;`,36
`Lst&lt;Set&lt;A&gt;&gt;`,36
`HashSet&lt;Option&lt;A&gt;&gt;`,36
`Set&lt;Option&lt;A&gt;&gt;`,36
`HashSet&lt;Try&lt;A&gt;&gt;`,36
Num<A></returns>,36
`Lst&lt;Seq&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`,36
file,36
`Set&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`IEnumerable&lt;Arr&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Set&lt;A&gt;&gt;`,36
`IEnumerable&lt;Option&lt;A&gt;&gt;`,36
`Seq&lt;Try&lt;A&gt;&gt;`,36
`Set&lt;HashSet&lt;A&gt;&gt;`,36
`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`,36
`HashSet&lt;Arr&lt;A&gt;&gt;`,36
`TryOption&lt;TryOption&lt;A&gt;&gt;`,36
`Arr&lt;Option&lt;A&gt;&gt;`,36
`IEnumerable&lt;Try&lt;A&gt;&gt;`,36
`Try&lt;Arr&lt;A&gt;&gt;`,36
`HashSet&lt;Set&lt;A&gt;&gt;`,36
`Seq&lt;Arr&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Try&lt;A&gt;&gt;`,36
`Set&lt;Try&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`,36
`Try&lt;Set&lt;A&gt;&gt;`,36
`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`IEnumerable&lt;Lst&lt;A&gt;&gt;`,36
`HashSet&lt;Seq&lt;A&gt;&gt;`,36
`Arr&lt;Seq&lt;A&gt;&gt;`,36
`TryOption&lt;Option&lt;A&gt;&gt;`,36
`Lst&lt;TryOption&lt;A&gt;&gt;`,36
`Set&lt;Seq&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`,36
`Set&lt;TryOption&lt;A&gt;&gt;`,36
`HashSet&lt;TryOption&lt;A&gt;&gt;`,36
`IEnumerable&lt;HashSet&lt;A&gt;&gt;`,36
`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`,36
`TryOption&lt;HashSet&lt;A&gt;&gt;`,36
`Lst&lt;Try&lt;A&gt;&gt;`,36
`IEnumerable&lt;TryOption&lt;A&gt;&gt;`,36
`Option&lt;Arr&lt;A&gt;&gt;`,36
`Option&lt;Try&lt;A&gt;&gt;`,36
tool,35
\`TryOption&lt;EitherAsync&lt;L,\,35
\`Try&lt;EitherAsync&lt;L,\,35
Task,35
\`Set&lt;EitherAsync&lt;L,\,35
\`Option&lt;EitherAsync&lt;L,\,35
lost,35
\`OptionUnsafe&lt;EitherAsync&lt;L,\,35
\`Lst&lt;EitherAsync&lt;L,\,35
filter,35
\`Arr&lt;EitherAsync&lt;L,\,35
Changes,35
divide,35
happens,35
\name="\Right"\>Right\,35
incorrect,35
\key,\,35
regenerated,35
Version:4.0.30319.42000,35
\`Seq&lt;EitherAsync&lt;L,\,35
\`IEnumerable&lt;EitherAsync&lt;L,\,35
\`HashSet&lt;EitherAsync&lt;L,\,35
Runtime,35
absolute,35
\name="\Left"\>Left\,35
function</returns>,34
Subtract,34
\first),\,34
Executes,34
silently,34
duplicate,34
logarithm,34
A</param>,34
parsed,34
\name="\Left"\>Function\,33
exists,33
<,33
`Option&lt;IEnumerable&lt;A&gt;&gt;`,33
`Arr&lt;IEnumerable&lt;A&gt;&gt;`,33
dealing,33
None</param>,33
unsigned,33
Creates,33
`TryOption&lt;IEnumerable&lt;A&gt;&gt;`,33
\it,\,33
\B,\,33
`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`,33
`Try&lt;IEnumerable&lt;A&gt;&gt;`,33
`Lst&lt;IEnumerable&lt;A&gt;&gt;`,33
`Seq&lt;IEnumerable&lt;A&gt;&gt;`,33
ignoring,33
runs,33
`HashSet&lt;IEnumerable&lt;A&gt;&gt;`,33
`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`,33
`Set&lt;IEnumerable&lt;A&gt;&gt;`,33
putStr,32
(if,32
do:,32
\provided,\,32
subset,32
with</param>,32
\order,\,32
Checks,32
untyped,32
TryOption,32
IOptional,32
implementation,32
execute</param>,32
infer</param>,32
doing:,32
\lambdas,\,32
select,31
curried,31
foldable,31
computations,31
Number,31
Implicit,31
occurrences,31
as-is,31
promise,31
Length,31
rhs,31
Only,31
`TryAsync&lt;Task&lt;A&gt;&gt;`,30
One,30
\<returns>`TryOption&lt;Validation&lt;FAIL,\,30
\<returns>`Try&lt;Either&lt;L,\,30
\<returns>`Seq&lt;Validation&lt;FAIL,\,30
`TryAsync&lt;TryAsync&lt;A&gt;&gt;`,30
\<returns>`Try&lt;Validation&lt;FAIL,\,30
`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`,30
\name="\setB"\>Set\,30
`OptionAsync&lt;Task&lt;A&gt;&gt;`,30
Remove,30
tangent,30
\<returns>`HashSet&lt;Either&lt;L,\,30
\<returns>`Set&lt;Either&lt;L,\,30
`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,30
\<returns>`Arr&lt;EitherUnsafe&lt;L,\,30
\<returns>`TryOption&lt;EitherUnsafe&lt;L,\,30
\name="\R"\>Resulting\,30
\<returns>`Lst&lt;Validation&lt;FAIL,\,30
\<returns>`HashSet&lt;Validation&lt;FAIL,\,30
\<returns>`Arr&lt;Validation&lt;FAIL,\,30
\<returns>`OptionUnsafe&lt;Validation&lt;FAIL,\,30
\<returns>`Arr&lt;Either&lt;L,\,30
Choice,30
`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,30
\<returns>`Option&lt;Either&lt;L,\,30
\<returns>`Lst&lt;Either&lt;L,\,30
`Task&lt;OptionAsync&lt;A&gt;&gt;`,30
`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`,30
`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,30
\<returns>`Set&lt;Validation&lt;FAIL,\,30
`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,30
\<returns>`IEnumerable&lt;Validation&lt;FAIL,\,30
\<returns>`Try&lt;EitherUnsafe&lt;L,\,30
\<returns>`Set&lt;EitherUnsafe&lt;L,\,30
\<returns>`OptionUnsafe&lt;EitherUnsafe&lt;L,\,30
pattern,30
\<returns>`Seq&lt;EitherUnsafe&lt;L,\,30
`TryOptionAsync&lt;Task&lt;A&gt;&gt;`,30
`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,30
cosine,30
\<returns>`Option&lt;EitherUnsafe&lt;L,\,30
`Task&lt;Task&lt;A&gt;&gt;`,30
`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`,30
replaced,30
\<returns>`Seq&lt;Either&lt;L,\,30
\<returns>`OptionUnsafe&lt;Either&lt;L,\,30
\name="\setA"\>Set\,30
\<returns>`IEnumerable&lt;Either&lt;L,\,30
just,30
`Task&lt;TryAsync&lt;A&gt;&gt;`,30
\<returns>`Option&lt;Validation&lt;FAIL,\,30
given,30
\<returns>`TryOption&lt;Either&lt;L,\,30
\<returns>`HashSet&lt;EitherUnsafe&lt;L,\,30
\failure,\,30
`Task&lt;TryOptionAsync&lt;A&gt;&gt;`,30
\<returns>`Lst&lt;EitherUnsafe&lt;L,\,30
\<returns>`IEnumerable&lt;EitherUnsafe&lt;L,\,30
void,29
first</param>,29
entire,29
Evaluate,29
\name="\A"\>Source\,29
\name="\stack"\>Stack</param>\,29
\fa,\,29
\fb,\,29
Either</returns>,29
fa,29
sequence</returns>,29
LINQ,29
(and,29
work,29
right;,28
3,28
represents,28
associative,28
<returns>Filtered,28
build,28
(because,28
\computation,\,28
also,28
<returns>Monad,28
operation</remarks>,28
Task&lt;B&gt;&gt;`,28
throw,28
\sequence,\,28
execute,28
Parses,28
double,28
containing,28
OptionAsync&lt;B&gt;&gt;`,28
R</returns>,28
[],28
convert</param>,28
Second,28
<returns>Tesult,28
TryAsync&lt;B&gt;&gt;`,28
TryOptionAsync&lt;B&gt;&gt;`,28
`OptionUnsafe&lt;Task&lt;A&gt;&gt;`,27
parsers,27
`IEnumerable&lt;OptionAsync&lt;A&gt;&gt;`,27
`Lst&lt;TryOptionAsync&lt;A&gt;&gt;`,27
`HashSet&lt;Task&lt;A&gt;&gt;`,27
`Set&lt;OptionAsync&lt;A&gt;&gt;`,27
`Set&lt;Task&lt;A&gt;&gt;`,27
`TryOption&lt;OptionAsync&lt;A&gt;&gt;`,27
`Arr&lt;TryAsync&lt;A&gt;&gt;`,27
`b`,27
`Try&lt;TryAsync&lt;A&gt;&gt;`,27
what,27
`HashSet&lt;TryOptionAsync&lt;A&gt;&gt;`,27
`Seq&lt;TryOptionAsync&lt;A&gt;&gt;`,27
numbers,27
`Seq&lt;TryAsync&lt;A&gt;&gt;`,27
`Arr&lt;TryOptionAsync&lt;A&gt;&gt;`,27
does,27
`Try&lt;TryOptionAsync&lt;A&gt;&gt;`,27
`IEnumerable&lt;TryOptionAsync&lt;A&gt;&gt;`,27
operators,27
`Lst&lt;TryAsync&lt;A&gt;&gt;`,27
`HashSet&lt;OptionAsync&lt;A&gt;&gt;`,27
\name="\R"\>Return\,27
`Option&lt;OptionAsync&lt;A&gt;&gt;`,27
`Option&lt;TryOptionAsync&lt;A&gt;&gt;`,27
`Arr&lt;OptionAsync&lt;A&gt;&gt;`,27
`Arr&lt;Task&lt;A&gt;&gt;`,27
`Option&lt;TryAsync&lt;A&gt;&gt;`,27
`Seq&lt;OptionAsync&lt;A&gt;&gt;`,27
`Option&lt;Task&lt;A&gt;&gt;`,27
`TryOption&lt;Task&lt;A&gt;&gt;`,27
`HashSet&lt;TryAsync&lt;A&gt;&gt;`,27
taking,27
`OptionUnsafe&lt;TryOptionAsync&lt;A&gt;&gt;`,27
<returns>1,27
\p,\,27
`TryOption&lt;TryAsync&lt;A&gt;&gt;`,27
filtered</returns>,27
`Set&lt;TryAsync&lt;A&gt;&gt;`,27
`Lst&lt;OptionAsync&lt;A&gt;&gt;`,27
`Lst&lt;Task&lt;A&gt;&gt;`,27
\name="\Succ"\>Fold\,27
\name="\stack"\>Stack\,27
`IEnumerable&lt;TryAsync&lt;A&gt;&gt;`,27
`OptionUnsafe&lt;OptionAsync&lt;A&gt;&gt;`,27
`TryOption&lt;TryOptionAsync&lt;A&gt;&gt;`,27
None/False,27
`OptionUnsafe&lt;TryAsync&lt;A&gt;&gt;`,27
\name="\Some"\>Fold\,27
`IEnumerable&lt;Task&lt;A&gt;&gt;`,27
`Set&lt;TryOptionAsync&lt;A&gt;&gt;`,27
`Seq&lt;Task&lt;A&gt;&gt;`,27
`Try&lt;OptionAsync&lt;A&gt;&gt;`,27
`Try&lt;Task&lt;A&gt;&gt;`,27
Structural,26
Generates,26
\name="\pred"\></param>\,26
sign,26
division,26
enumerator,26
noneValue,26
cok,26
B</param>,26
extra,26
Enumerable,26
state.</returns>,26
seeded,25
base,25
\collection,\,25
helper,25
\name="\list"\>List\,25
usually,25
\name="\set"\>HSet</param>\,25
term</typeparam>,25
\<returns>`OptionAsync&lt;EitherAsync&lt;L,\,25
\<returns>`TryOptionAsync&lt;EitherAsync&lt;L,\,25
failure</param>,25
separated,25
Builds,25
Defines,25
succeeds,25
union,25
\<returns>`TryAsync&lt;EitherAsync&lt;L,\,25
\<returns>`Task&lt;EitherAsync&lt;L,\,25
keyValues,25
Partitions,24
updates,24
'then',24
pairs,24
\name="\NUM"\>Num\,24
ends,24
\in,\,24
\`TryOptionAsync&lt;EitherUnsafe&lt;L,\,24
values),24
passes,24
dropped,24
logical,24
\extracted,\,24
\`OptionAsync&lt;Either&lt;L,\,24
\`OptionAsync&lt;EitherUnsafe&lt;L,\,24
thing,24
\name="\C"\>Return\,24
\`OptionAsync&lt;Validation&lt;FAIL,\,24
\`Task&lt;Validation&lt;FAIL,\,24
state.</param>,24
\name="\folder"\>Folder\,24
\`TryOptionAsync&lt;Either&lt;L,\,24
onwards,24
IQueryable,24
calculated</param>,24
\`TryAsync&lt;Validation&lt;FAIL,\,24
successful,24
Similarly,24
\`TryAsync&lt;Either&lt;L,\,24
key/value,24
\name="\B"\>Source\,24
calculated,24
\name="\Fail"\>Function\,24
(string,24
\`TryOptionAsync&lt;Validation&lt;FAIL,\,24
\`TryAsync&lt;EitherUnsafe&lt;L,\,24
forall</param>,24
Runs,24
calculating,24
faulted,24
sine,24
\name="\ma"\>Option</param>\,24
\`Task&lt;Either&lt;L,\,24
\Finally,\,24
\`Task&lt;EitherUnsafe&lt;L,\,24
functions</returns>,24
third,23
C,23
\name="\Right"\>Function\,23
\name="\None"\>Fold\,23
Test,23
methods,23
\name="\rhs"\>Right\,23
delegates</returns>,23
None</returns>,23
),23
\name="\map"\>Map\,23
merge,23
successful</param>,23
First,23
rhs),22
overlaps,22
NOTE:,22
\name="\Some"\>Projection\,22
Use,22
eok,22
monad</returns>,22
\name="\f"\>Folder\,22
composition,22
removes,22
Counts,22
\name="\Ret"\>Return\,22
consuming,22
derives,22
error,22
\name="\None"\>Predicate\,22
addition,22
compositions,22
Otherwise,22
int,22
for-all,22
Provide,22
project</param>,22
account,22
fa</param>,22
\name="\Some"\>Predicate\,22
(lhs,22
Else,22
\name="\f"\>Action\,22
\name="\None"\>Projection\,22
match</param>,22
Set&lt;A&gt;&gt;`</returns>,21
\name="\f"\>Mapping\,21
Option&lt;A&gt;&gt;`</param>,21
Seq&lt;A&gt;&gt;`</returns>,21
\name="\ma"\>Functor\,21
Option&lt;A&gt;&gt;`</returns>,21
<returns>Some(x),21
Try&lt;A&gt;&gt;`</param>,21
OptionUnsafe&lt;A&gt;&gt;`</param>,21
HashSet&lt;A&gt;&gt;`</returns>,21
Set&lt;A&gt;&gt;`</param>,21
Arr&lt;A&gt;&gt;`</param>,21
handler,21
context,21
(http://dkeenan.com/Lambda/,21
Lst&lt;A&gt;&gt;`</param>,21
HashSet&lt;A&gt;&gt;`</param>,21
OptionUnsafe&lt;A&gt;&gt;`</returns>,21
traversed,21
);,21
Arr&lt;A&gt;&gt;`</returns>,21
document,21
IEnumerable&lt;A&gt;&gt;`</param>,21
make,21
\'FoldBack',\,21
IEnumerable&lt;A&gt;&gt;`</returns>,21
Immutable,21
outermost,21
NewType,21
Failed,21
TryOption&lt;A&gt;&gt;`</returns>,21
Lst&lt;A&gt;&gt;`</returns>,21
Seq&lt;A&gt;&gt;`</param>,21
invoke</param>,21
[Fact],21
allow,21
..,21
TryOption&lt;A&gt;&gt;`</param>,21
`b`</returns>,21
Try&lt;A&gt;&gt;`</returns>,21
Provides,21
&&,20
\name="\T"\>T</typeparam>\,20
\<returns>`Option&lt;EitherAsync&lt;L,\,20
B,20
\name="\fa"\>Folder\,20
\name="\predstate"\>Predicate\,20
\<returns>`Try&lt;EitherAsync&lt;L,\,20
AVL,20
\<returns>`TryOption&lt;EitherAsync&lt;L,\,20
\name="\fabc"\>IEnumerable\,20
\<returns>`OptionUnsafe&lt;EitherAsync&lt;L,\,20
\name="\fa"\>sequence\,20
\<returns>`HashSet&lt;EitherAsync&lt;L,\,20
point,20
Some/True,20
<returns>Empty,20
\<returns>`Lst&lt;EitherAsync&lt;L,\,20
unless,20
Tri-map,20
Time,20
\<returns>`Set&lt;EitherAsync&lt;L,\,20
\name="\preditem"\>Predicate\,20
\name="\fb"\>Folder\,20
\<returns>`Arr&lt;EitherAsync&lt;L,\,20
\name="\set"\>Set\,20
\name="\fa"\>IEnumerable\,20
count</param>,20
Bi-maps,20
some,20
decimal,20
\cok,\,20
values</returns>,20
\x.Product<TInteger,int>(y)\,20
cerr,20
'this',20
\processed,\,20
cancelled,20
\<returns>`IEnumerable&lt;EitherAsync&lt;L,\,20
<returns>x,20
\<returns>`Seq&lt;EitherAsync&lt;L,\,20
record,20
Parse,20
\name="\fabc"\>sequence\,20
\map,\,20
hash-map,19
environment,19
\name="\W"\>Writer\,19
lazy,19
\<returns>B,\,19
need,19
angle,19
\name="\f"\>Projection\,19
Run,19
Empty,19
before,19
returned</returns>,19
invocation,19
\name="\noneValue"\>Value\,19
time,19
succeeds</param>,19
filter</param>,19
operations,19
tries,19
<returns>noneValue,19
Option<B></returns>,19
null</returns>,19
\name="\Ret"\>Mapped\,19
characters,19
\name="\RRet"\>Right\,18
handler</param>,18
\name="\LRet"\>Left\,18
identifier,18
'Bottom',18
maybe,18
,18
\eok,\,18
parameters,18
give,18
Bottom,18
predicates,18
list</returns>,18
Logical,18
\name="\mapper"\>Delegate\,18
\name="\Right"\>Action\,18
`BindReturn`,18
over,18
Third,18
subtraction,18
AND,18
exceptions,18
radians</param>,18
they,18
rhs);,18
\angle,\,18
float,18
against,18
\name="\x"\>An\,18
OR,18
Multiply,18
\x,\,18
Key</remarks>,18
until,18
always,18
TODO:,18
\name="\keys"\>Keys\,18
\<returns>`Task&lt;Either&lt;L,\,17
\name="\lhs"\>Left\,17
`Task&lt;OptionUnsafe&lt;A&gt;&gt;`,17
`TryAsync&lt;HashSet&lt;A&gt;&gt;`,17
complete,17
state</exception>,17
`Task&lt;Arr&lt;A&gt;&gt;`,17
\<returns>`TryAsync&lt;Validation&lt;FAIL,\,17
char,17
`Task&lt;Try&lt;A&gt;&gt;`,17
`Bind`,17
`TryOptionAsync&lt;HashSet&lt;A&gt;&gt;`,17
executes,17
converts,17
`Task&lt;HashSet&lt;A&gt;&gt;`,17
\<returns>`TryAsync&lt;EitherUnsafe&lt;L,\,17
Projects,17
`Task&lt;Lst&lt;A&gt;&gt;`,17
\<returns>`OptionAsync&lt;EitherUnsafe&lt;L,\,17
chance,17
`TryAsync&lt;Try&lt;A&gt;&gt;`,17
>,17
\<returns>`Task&lt;EitherUnsafe&lt;L,\,17
`OptionAsync&lt;Seq&lt;A&gt;&gt;`,17
\<returns>`OptionAsync&lt;Validation&lt;FAIL,\,17
\<returns>`TryAsync&lt;Either&lt;L,\,17
could,17
`OptionAsync&lt;Arr&lt;A&gt;&gt;`,17
\<returns>`Task&lt;Validation&lt;FAIL,\,17
\name="\self"\>TryAsync\,17
`Task&lt;Option&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;Lst&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;Try&lt;A&gt;&gt;`,17
`Task&lt;Seq&lt;A&gt;&gt;`,17
multiple,17
`Task&lt;Set&lt;A&gt;&gt;`,17
fail,17
`Task&lt;TryOption&lt;A&gt;&gt;`,17
functions:,17
`OptionAsync&lt;Option&lt;A&gt;&gt;`,17
removed,17
version,17
`OptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,17
IsLeft,17
`TryAsync&lt;Arr&lt;A&gt;&gt;`,17
y),17
`TryAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,17
`TryAsync&lt;Option&lt;A&gt;&gt;`,17
`TryAsync&lt;Lst&lt;A&gt;&gt;`,17
`TryAsync&lt;Set&lt;A&gt;&gt;`,17
success,17
\<returns>`TryOptionAsync&lt;Validation&lt;FAIL,\,17
present,17
`TryOptionAsync&lt;Seq&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;Arr&lt;A&gt;&gt;`,17
`TryAsync&lt;Seq&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;Option&lt;A&gt;&gt;`,17
`OptionAsync&lt;Set&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;Set&lt;A&gt;&gt;`,17
`OptionAsync&lt;Try&lt;A&gt;&gt;`,17
`OptionAsync&lt;Lst&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,17
\<returns>`OptionAsync&lt;Either&lt;L,\,17
\name="\Some"\>Action\,17
`TryAsync&lt;TryOption&lt;A&gt;&gt;`,17
\<returns>`TryOptionAsync&lt;EitherUnsafe&lt;L,\,17
`OptionAsync&lt;TryOption&lt;A&gt;&gt;`,17
`OptionAsync&lt;HashSet&lt;A&gt;&gt;`,17
`TryOptionAsync&lt;TryOption&lt;A&gt;&gt;`,17
\<returns>`TryOptionAsync&lt;Either&lt;L,\,17
\cref="\BottomException"\>Thrown\,17
mapper,17
\name="\mapper"\>Mapping\,17
tranform,17
\document,\,17
folder,16
Task&lt;C&gt;&gt;`,16
infer</returns>,16
sequences,16
Console.WriteLine(x);,16
remove,16
single,16
is</returns>,16
predicate</returns>,16
reserved,16
argument</param>,16
\name="\fb"\>Projection\,16
eerr,16
\x.Subtract<TInteger,int>(y)\,16
\name="\fa"\>Projection\,16
Extension,16
<returns>Same,16
folds,16
NOT,16
Filters,16
won't,16
GetEnumerator,16
gave,16
\name="\fa"\>Foldable</param>\,16
TryOptionAsync&lt;C&gt;&gt;`,16
\name="\ma"\>Choice\,16
TryAsync&lt;C&gt;&gt;`,16
1</returns>,16
\name="\self"\>Validation\,16
join</param>,16
HSet,16
\name="\A"\></typeparam>\,16
example:,16
choice,16
prefix,16
op,16
expressions,16
\name="\Some"\>Function\,16
combinator,16
\name="\ma"\>Computation\,16
setA</returns>,16
Expression,16
thereIsNoReturn,16
Converts,16
OptionAsync&lt;C&gt;&gt;`,16
Union,16
accessor,16
evaluate</param>,16
gives,16
multiply,16
\name="\R"\>Environment\,16
sum</param>,16
Fourth,16
//,16
Tuple,16
wrapped,16
added,16
\name="\list"\>sequence</param>\,16
<returns>`Try&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;TryOption&lt;A&gt;&gt;`,15
Turns,15
<returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Lst&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Set&lt;Try&lt;A&gt;&gt;`,15
[x],15
<returns>`Lst&lt;Option&lt;A&gt;&gt;`,15
Fail</returns>,15
<returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;Set&lt;A&gt;&gt;`,15
<returns>`Seq&lt;Set&lt;A&gt;&gt;`,15
\name="\Some"\>delegate\,15
space,15
<returns>`Seq&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`Set&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Option&lt;Seq&lt;A&gt;&gt;`,15
<returns>`Arr&lt;Set&lt;A&gt;&gt;`,15
<returns>`Option&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`Lst&lt;Set&lt;A&gt;&gt;`,15
\name="\count"\>Number\,15
unit,15
<returns>`Try&lt;Set&lt;A&gt;&gt;`,15
c,15
<returns>`Try&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`Arr&lt;Seq&lt;A&gt;&gt;`,15
Performs,15
<returns>`Lst&lt;Try&lt;A&gt;&gt;`,15
Check,15
<returns>`Arr&lt;Option&lt;A&gt;&gt;`,15
<returns>`Option&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Set&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Arr&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`Arr&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`Set&lt;Set&lt;A&gt;&gt;`,15
<returns>`Try&lt;Option&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;Option&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`,15
squared,15
<returns>`Try&lt;Seq&lt;A&gt;&gt;`,15
performs,15
<returns>`Option&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Seq&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Try&lt;Try&lt;A&gt;&gt;`,15
<returns>`Arr&lt;Arr&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`Try&lt;Arr&lt;A&gt;&gt;`,15
retrieving,15
<returns>`TryOption&lt;Seq&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;Set&lt;A&gt;&gt;`,15
<returns>`Lst&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`Seq&lt;TryOption&lt;A&gt;&gt;`,15
Clears,15
filtering,15
end,15
<returns>`TryOption&lt;Try&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;`,15
\name="\self"\>This</param>\,15
<returns>`Option&lt;Try&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;`,15
<returns>`Option&lt;Set&lt;A&gt;&gt;`,15
run</param>,15
<returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;Set&lt;A&gt;&gt;`,15
explicit,15
<returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`Set&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Lst&lt;Lst&lt;A&gt;&gt;`,15
putting,15
empty</param>,15
<returns>`Option&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`Arr&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Seq&lt;Arr&lt;A&gt;&gt;`,15
Reverses,15
<returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;Try&lt;A&gt;&gt;`,15
natural,15
initial,15
\name="\index"\>Index\,15
<returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;`,15
join,15
<returns>`Try&lt;Lst&lt;A&gt;&gt;`,15
<returns>`Set&lt;Option&lt;A&gt;&gt;`,15
comparison,15
<returns>`Lst&lt;Seq&lt;A&gt;&gt;`,15
<returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;`,15
<returns>`Option&lt;Option&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;Option&lt;A&gt;&gt;`,15
<returns>`Seq&lt;Option&lt;A&gt;&gt;`,15
defined,15
<returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;`,15
valid,15
setting</param>,15
<returns>`HashSet&lt;Seq&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Set&lt;TryOption&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;Try&lt;A&gt;&gt;`,15
positive,15
\name="\set"\>Set</param>\,15
<returns>`Arr&lt;Try&lt;A&gt;&gt;`,15
<returns>`Set&lt;Seq&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`,15
<returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`,15
<returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`,15
<returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`,15
sequence</param>,15
<returns>`Seq&lt;Try&lt;A&gt;&gt;`,15
<returns>`TryOption&lt;Option&lt;A&gt;&gt;`,15
<returns>`Lst&lt;HashSet&lt;A&gt;&gt;`,15
<returns>`Seq&lt;Seq&lt;A&gt;&gt;`,15
Non-equality,15
\name="\self"\>TryOptionAsync\,14
ascertain,14
IL,14
writer,14
<returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;`,14
\name="\Right"\>Folder\,14
static,14
`Fail`,14
<returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`,14
<returns>`Try&lt;IEnumerable&lt;A&gt;&gt;`,14
<returns>Sum,14
`OptionAsync&lt;IEnumerable&lt;A&gt;&gt;`,14
Transforms,14
IsRight,14
`Some`,14
exclusive-OR,14
<returns>`Set&lt;IEnumerable&lt;A&gt;&gt;`,14
func,14
<returns>Target,14
<returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`,14
needed,14
data-type,14
And,14
Seq,14
etc,14
<returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;`,14
\name="\A"\>Foldable\,14
IsBottom,14
<returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;`,14
<returns>`Option&lt;IEnumerable&lt;A&gt;&gt;`,14
Somes,14
fun((string,14
<returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;`,14
lifted,14
Unit,14
CompareTo,14
them,14
\name="\Succ"\>Function\,14
\name="\ma"\>Source\,14
tuple</returns>,14
tuple</param>,14
\name="\FailAsync"\>Delegate\,14
\name="\L"\>Fail</typeparam>\,14
part,14
construct,14
transformed,14
format,14
power,14
`Task&lt;IEnumerable&lt;A&gt;&gt;`,14
<returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;`,14
\out,\,14
`TryAsync&lt;IEnumerable&lt;A&gt;&gt;`,14
Optional,14
\input,\,14
`TryOptionAsync&lt;IEnumerable&lt;A&gt;&gt;`,14
task,14
Where,14
EqDefault,14
\MB,\,14
Allows,14
can't,14
itself,13
\name="\B"\>The\,13
Constructor,13
throws,13
item</returns>,13
etc.),13
A>,13
\name="\R"\>Mapped\,13
original,13
following,13
<returns>Sequence,13
typed,13
Override,13
wraps,13
compose,13
cached,13
`Option`,13
&lt;,13
module,13
range</param>,13
Area,13
Option<A>,13
\name="\R"\>Target\,13
\name="\T"\>Bound\,13
Reverse,13
ratio,13
Lexeme,13
patches,13
\x.Divide<TDouble,double>(y)\,12
\OptionUnsafe&lt;A&gt;&gt;`,\,12
\name="\selector"\>Selector\,12
represent,12
\name="\SomeAsync"\>Delegate\,12
\Task&lt;A&gt;&gt;`,\,12
\name="\A"\>Sequence\,12
'rhs',12
sep,12
instance</returns>,12
produces,12
extract,12
Will,12
non-negative,12
take</param>,12
<returns>Fluent,12
form,12
Metres,12
\Set&lt;A&gt;&gt;`,\,12
\name="\FAB"\>Source\,12
=&gt;,12
arc-tangent,12
'selector',12
<returns>Flattened,12
\TryAsync&lt;A&gt;&gt;`,\,12
\Seq&lt;A&gt;&gt;`,\,12
Task&lt;A&gt;&gt;`</param>,12
TryOptionAsync&lt;A&gt;&gt;`</param>,12
\name="\reducer"\>Reduce\,12
radians</returns>,12
General,12
request,12
\name="\NoneAsync"\>Delegate\,12
\OptionAsync&lt;A&gt;&gt;`,\,12
item</param>,12
\IEnumerable&lt;A&gt;&gt;`,\,12
immediately,12
made,12
arcsine,12
\Option&lt;A&gt;&gt;`,\,12
R2s,12
`Writer`,12
stopping,12
Sixth,12
expression</returns>,12
\Arr&lt;A&gt;&gt;`,\,12
soon,12
\item,\,12
\TryOptionAsync&lt;A&gt;&gt;`,\,12
stack</param>,12
exponent,12
intermediate,12
keep,12
\x.Add<TInteger,int>(y)\,12
If/Then/Else,12
(Sum,12
F#,12
\name="\None"\>Handler\,12
Fifth,12
lexeme,12
(Aggregate,12
\Lst&lt;A&gt;&gt;`,\,12
iterate</param>,12
branch,12
y;,12
\successful,\,12
Some(f(x)),12
Default,12
once,12
\TryOption&lt;A&gt;&gt;`,\,12
remove</param>,12
'plus',12
<remarks>Functionally,12
comprised,12
Constructs,12
\name="\folder"\>Folding\,12
\name="\T"\>List\,12
untouched</remarks>,12
<returns>Optional,12
language,12
As</returns>,12
\name="\self"\>EitherUnsafe\,12
bi-functor,12
TryAsync&lt;A&gt;&gt;`</param>,12
reference,12
square,12
\name="\value"\>Value,\,12
<=,12
Ts,12
arc-cosine,12
under,12
OptionAsync&lt;A&gt;&gt;`</param>,12
combinations,12
isn't,12
\name="\R"\>Success</typeparam>\,12
noneValue</remarks>,12
<returns>RWS,12
\TDouble,\,12
<returns>Lst,12
\HashSet&lt;A&gt;&gt;`,\,12
\name="\x"\>\,12
\Try&lt;A&gt;&gt;`,\,12
Insert,12
condition,12
\name="\Some"\>Handler\,12
definition,12
Flattens,12
total</returns>,12
Removes,12
yielding,12
\name="\R"\>Returned\,12
matcher</returns>,12
\0,\,12
<returns>failValue,11
remainder,11
<returns>Bound,11
continue,11
parallel,11
<returns>Nullable,11
\<returns>-1,\,11
evaluation,11
ctor,11
+1</returns>,11
LanguageExt,11
\name="\b"\>The\,11
(or,11
Imagine,11
standard,11
checked,11
floating,11
building,11
\name="\MA"\>Monad\,11
res,11
\set,\,11
minimum,11
their,11
value;,11
reverse</param>,11
B>,11
(i.e,11
going,11
facilitates,11
EitherUnsafe</returns>,11
\name="\array"\>Array\,11
do,11
(Reverse,11
even,11
elements</returns>,11
Value,11
'Some',11
onto,11
terms,11
NumType,11
\name="\other"\>Other\,11
hash-set,11
\name="\f"\>Predicate\,11
remains,11
style,11
unpredictable,11
\name="\list"\>Enumerable</param>\,11
<returns>Reversed,11
\name="\Fail"\>Default\,11
disposable,11
32-bit,11
asynchronous,11
Both,11
table,11
<returns>`Seq&lt;Task&lt;A&gt;&gt;`,10
<returns>`TryOption&lt;Task&lt;A&gt;&gt;`,10
<returns>`Task&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`Seq&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`HashSet&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Set&lt;Try&lt;B&gt;&gt;`,10
<returns>Product,10
<returns>`Set&lt;Arr&lt;B&gt;&gt;`,10
start,10
<returns>`OptionUnsafe&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`Lst&lt;Arr&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`Arr&lt;Try&lt;B&gt;&gt;`,10
`y`,10
start</param>,10
search,10
<returns>`HashSet&lt;HashSet&lt;B&gt;&gt;`,10
r,10
<returns>`TryOption&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;Option&lt;B&gt;&gt;`,10
one</param>,10
<returns>`Option&lt;Task&lt;A&gt;&gt;`,10
exists</exception>,10
copy,10
<returns>`IEnumerable&lt;OptionAsync&lt;A&gt;&gt;`,10
leftMap,10
<returns>`Lst&lt;Lst&lt;B&gt;&gt;`,10
<returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Lst&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`TryOption&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Option&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`Try&lt;Option&lt;B&gt;&gt;`,10
<returns>`Try&lt;Lst&lt;B&gt;&gt;`,10
<returns>`Seq&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`Set&lt;TryOption&lt;B&gt;&gt;`,10
succeeds</returns>,10
<returns>`HashSet&lt;OptionAsync&lt;A&gt;&gt;`,10
solution,10
<returns>`OptionUnsafe&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;Arr&lt;B&gt;&gt;`,10
<returns>`TryOption&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>String,10
<returns>`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`Try&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`Seq&lt;OptionAsync&lt;A&gt;&gt;`,10
\cref="\ValueIsNullException"\>Value\,10
\name="\a"\>The\,10
i.e,10
test</typeparam>,10
<returns>`Try&lt;Seq&lt;B&gt;&gt;`,10
\struct,\,10
Fail</param>,10
<returns>`Option&lt;OptionAsync&lt;A&gt;&gt;`,10
Emits,10
<returns>`OptionUnsafe&lt;Task&lt;A&gt;&gt;`,10
replaces,10
<returns>`TryOption&lt;TryOption&lt;B&gt;&gt;`,10
As,10
partially,10
<returns>`Lst&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`Option&lt;Arr&lt;B&gt;&gt;`,10
<returns>`Lst&lt;Task&lt;A&gt;&gt;`,10
Explicit,10
<returns>`Arr&lt;Set&lt;B&gt;&gt;`,10
<returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;`,10
shown,10
root,10
<returns>`TryOption&lt;Option&lt;B&gt;&gt;`,10
<remarks>This,10
identifiers,10
<returns>`Arr&lt;Option&lt;B&gt;&gt;`,10
<returns>`Option&lt;Option&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;`,10
white,10
<returns>`Arr&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`Set&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`Seq&lt;Seq&lt;B&gt;&gt;`,10
\name="\Left"\>Action\,10
<returns>`Set&lt;Lst&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;Set&lt;B&gt;&gt;`,10
<returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;`,10
\Func<T,R>\,10
<returns>`HashSet&lt;Try&lt;B&gt;&gt;`,10
Eq<A>,10
<returns>`Set&lt;Set&lt;B&gt;&gt;`,10
\name="\list"\>List</param>\,10
<returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;Lst&lt;B&gt;&gt;`,10
<returns>`Set&lt;TryAsync&lt;A&gt;&gt;`,10
look,10
<returns>`Arr&lt;Lst&lt;B&gt;&gt;`,10
<returns>`Lst&lt;Set&lt;B&gt;&gt;`,10
<returns>`TryAsync&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`Try&lt;Arr&lt;B&gt;&gt;`,10
<returns>`Set&lt;Seq&lt;B&gt;&gt;`,10
<returns>`TryOption&lt;Arr&lt;B&gt;&gt;`,10
<returns>`Lst&lt;HashSet&lt;B&gt;&gt;`,10
pred(Result),10
approximation,10
<returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;`,10
<returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;`,10
(inclusive)</param>,10
<returns>`Set&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`IEnumerable&lt;TryOptionAsync&lt;A&gt;&gt;`,10
State,10
<returns>`Try&lt;Task&lt;A&gt;&gt;`,10
Map.empty,10
postfix,10
delegates,10
<returns>`Lst&lt;Try&lt;B&gt;&gt;`,10
<returns>`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`Arr&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>Success,10
<returns>`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,10
stateds,10
<returns>`Option&lt;TryOptionAsync&lt;A&gt;&gt;`,10
\name="\None"\>Action\,10
(Select,10
\name="\A"\>Value\,10
longest,10
<returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;Set&lt;B&gt;&gt;`,10
implicit,10
<returns>`Try&lt;Set&lt;B&gt;&gt;`,10
String,10
<returns>`Option&lt;Try&lt;B&gt;&gt;`,10
pi,10
<returns>`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`Task&lt;Task&lt;A&gt;&gt;`,10
<returns>`TryOption&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`Seq&lt;Lst&lt;B&gt;&gt;`,10
edits,10
Copy,10
<returns>`Try&lt;Try&lt;B&gt;&gt;`,10
<returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`HashSet&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;Option&lt;B&gt;&gt;`,10
<returns>`OptionAsync&lt;Task&lt;A&gt;&gt;`,10
obtained,10
queue,10
<returns>`TryOption&lt;Set&lt;B&gt;&gt;`,10
<returns>`Arr&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`Option&lt;Lst&lt;B&gt;&gt;`,10
<returns>`Try&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,10
When,10
\rhs,\,10
<returns>`TryOption&lt;Try&lt;B&gt;&gt;`,10
expects,10
<returns>`Set&lt;Task&lt;A&gt;&gt;`,10
<returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;`,10
<returns>`Option&lt;Set&lt;B&gt;&gt;`,10
<returns>`Option&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`Arr&lt;TryAsync&lt;A&gt;&gt;`,10
y);,10
<returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`TryAsync&lt;Task&lt;A&gt;&gt;`,10
<returns>`Option&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Try&lt;TryOptionAsync&lt;A&gt;&gt;`,10
<returns>`TryOptionAsync&lt;Task&lt;A&gt;&gt;`,10
Lazily,10
<returns>`Seq&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`OptionUnsafe&lt;OptionAsync&lt;A&gt;&gt;`,10
EQ,10
<returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;`,10
<returns>`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,10
http://en.wikipedia.org/wiki/AVL_tree,10
That,10
pair,10
<returns>`HashSet&lt;Task&lt;A&gt;&gt;`,10
<returns>`Seq&lt;Try&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`IEnumerable&lt;Task&lt;A&gt;&gt;`,10
<returns>`Try&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`Arr&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`Set&lt;Option&lt;B&gt;&gt;`,10
unaltered,10
objects,10
Function,10
<returns>`Lst&lt;Seq&lt;B&gt;&gt;`,10
<returns>`Arr&lt;OptionAsync&lt;A&gt;&gt;`,10
found,10
<returns>`Option&lt;TryOption&lt;B&gt;&gt;`,10
<returns>`TryOption&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;`,10
<returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`HashSet&lt;TryOptionAsync&lt;A&gt;&gt;`,10
culture-specific,10
needs,10
self-balancing,10
<returns>`Lst&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`Arr&lt;Arr&lt;B&gt;&gt;`,10
<returns>`Seq&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;`,10
<returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;`,10
done,10
<returns>`Set&lt;HashSet&lt;B&gt;&gt;`,10
<returns>`Arr&lt;Task&lt;A&gt;&gt;`,10
<returns>`Seq&lt;Set&lt;B&gt;&gt;`,10
ValueIsNullException,10
<returns>`IEnumerable&lt;Try&lt;B&gt;&gt;`,10
\name="\Left"\>Folder\,10
keyword,10
<returns>`Lst&lt;TryOption&lt;B&gt;&gt;`,10
};,10
<returns>`Seq&lt;Option&lt;B&gt;&gt;`,10
<returns>`Task&lt;TryAsync&lt;A&gt;&gt;`,10
<returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`,10
first),10
<returns>`Seq&lt;Arr&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;`,10
<returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;`,10
<returns>`Try&lt;HashSet&lt;B&gt;&gt;`,10
f),10
<returns>`Lst&lt;Option&lt;B&gt;&gt;`,10
<returns>`Task&lt;OptionAsync&lt;A&gt;&gt;`,10
<returns>`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,10
Silently,10
<returns>`TryOption&lt;Lst&lt;B&gt;&gt;`,10
struct,10
\name="\mapper"\>Map\,9
attempt,9
`O(log,9
call:,9
<returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;`,9
unit;,9
provided</returns>,9
<returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;`,9
information,9
\name="\defaultLeftValue"\>Default\,9
<returns>`Set&lt;IEnumerable&lt;B&gt;&gt;`,9
expr,9
Concatenate,9
pushed,9
way,9
Identity,9
Task&lt;A&gt;&gt;`</returns>,9
Bi-bind,9
<returns>`Try&lt;IEnumerable&lt;B&gt;&gt;`,9
(sum),9
<returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;`,9
issue,9
OptionAsync&lt;A&gt;&gt;`</returns>,9
List,9
generic,9
curry(f);,9
Left(),9
structure:,9
see,9
replace,9
BottomException,9
token,9
TryOptionAsync&lt;A&gt;&gt;`</returns>,9
<returns>Action,9
R2,9
Parser,9
Assert.Throws<Exception>((),9
\FAIL,\,9
bird,9
sets</returns>,9
\name="\self"\>TrTry\,9
...),9
n,9
<returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;`,9
Curry,9
\name="\a"\>None\,9
Predicate,9
<returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;`,9
Count,9
efficient,9
<returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;`,9
negated,9
calling:,9
TryAsync&lt;A&gt;&gt;`</returns>,9
ended,9
message,9
Or,9
\name="\defaultLeftValue"\>Function\,9
\name="\ma"\>This</param>\,9
leftValue,9
Attempt,9
node,9
dictionary,9
<returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;`,9
because,9
<returns>`Option&lt;IEnumerable&lt;B&gt;&gt;`,9
RWS,9
block,9
Pop,9
\name="\ma"\>Monad\,9
Negate,9
negate</param>,9
opt,9
maintain,9
\both,\,9
precedence,9
available,9
alternative,9
Uses,9
Initializes,9
asynchronously,8
Option&lt;B&gt;&gt;`</returns>,8
<returns>`OptionAsync&lt;Arr&lt;A&gt;&gt;`,8
\name="\predicates"\>The\,8
base(x),8
<returns>`TryOptionAsync&lt;Seq&lt;A&gt;&gt;`,8
<returns>`Task&lt;HashSet&lt;A&gt;&gt;`,8
<returns>`TryAsync&lt;Option&lt;A&gt;&gt;`,8
dropped</returns>,8
Always,8
<returns>`TryOptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,8
\name="\bind"\>Bind\,8
satisfy,8
'count',8
Quad-fold,8
act((string,8
tuples),8
\name="\fb"\>IEnumerable\,8
Integer,8
<returns>`TryAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,8
\name="\Empty"\>Match\,8
Derive,8
<returns>`Task&lt;Seq&lt;A&gt;&gt;`,8
EitherRight,8
lambda,8
enumerables,8
Validation</returns>,8
\Action&lt;string,Unit&gt;\,8
\name="\pair"\>Pair\,8
<returns>`Task&lt;Option&lt;A&gt;&gt;`,8
memoized,8
<returns>`TryAsync&lt;HashSet&lt;A&gt;&gt;`,8
calls,8
<returns>`OptionAsync&lt;TryOption&lt;A&gt;&gt;`,8
non-empty</param>,8
\name="\selector"\>Predicate</param>\,8
a),8
double>,8
<returns>IEnumerable,8
faulted</returns>,8
sequence</typeparam>,8
want,8
statement,8
TryOption&lt;B&gt;&gt;`</returns>,8
(int,8
string&gt;,8
<returns>`TryAsync&lt;Set&lt;A&gt;&gt;`,8
\faulted,\,8
\name="\FR"\>Target\,8
<returns>`TryAsync&lt;TryOption&lt;A&gt;&gt;`,8
Right(),8
<returns>`TryOptionAsync&lt;OptionAsync&lt;B&gt;&gt;`,8
invoked</returns>,8
<returns>`TryOptionAsync&lt;TryOption&lt;A&gt;&gt;`,8
<returns>`OptionAsync&lt;Try&lt;A&gt;&gt;`,8
\name="\other"\>Second\,8
These,8
reduce</param>,8
optimal,8
IEnumerator,8
<returns>`TryOptionAsync&lt;Option&lt;A&gt;&gt;`,8
thereis(x);,8
search</param>,8
||,8
\Func&lt;int,int,int&gt;\,8
<returns>`OptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,8
<returns>`Task&lt;OptionAsync&lt;B&gt;&gt;`,8
<returns>`TryOptionAsync&lt;Arr&lt;A&gt;&gt;`,8
'pred',8
about,8
<returns>`OptionAsync&lt;Seq&lt;A&gt;&gt;`,8
zeroThe,8
'label',8
<returns>`TryOptionAsync&lt;Lst&lt;A&gt;&gt;`,8
Try&lt;B&gt;&gt;`</returns>,8
<returns>`TryOptionAsync&lt;Try&lt;A&gt;&gt;`,8
\(A,\,8
local,8
other:,8
true</returns>,8
s,8
<returns>`TryOptionAsync&lt;HashSet&lt;A&gt;&gt;`,8
<returns>`Task&lt;OptionUnsafe&lt;A&gt;&gt;`,8
\name="\Term2"\>Second\,8
OptionAsyncal,8
ISubtractable,8
IEnumerable&lt;B&gt;&gt;`</returns>,8
whose,8
\found,\,8
\Func&lt;string,Unit&gt;\,8
structural,8
\output,\,8
<returns>`Task&lt;Arr&lt;A&gt;&gt;`,8
\name="\V"\>Target\,8
\name="\R"\>Result\,8
thereIs,8
\name="\pred"\>The\,8
failed,8
Unit</returns>,8
<returns>`TryOptionAsync&lt;Set&lt;A&gt;&gt;`,8
cache,8
\name="\U"\>Target\,8
\name="\value"\>Non-null\,8
<returns>`OptionAsync&lt;Task&lt;B&gt;&gt;`,8
\name="\T"\>Set\,8
Lst&lt;B&gt;&gt;`</returns>,8
<returns>Func,8
\name="\value"\>The\,8
\name="\map"\>Functor\,8
fluently,8
OptionUnsafe&lt;B&gt;&gt;`</returns>,8
<returns>`OptionAsync&lt;Option&lt;A&gt;&gt;`,8
<returns>`TryAsync&lt;Seq&lt;A&gt;&gt;`,8
\name="\leftMap"\>Function\,8
<returns>Joined,8
Seq&lt;B&gt;&gt;`</returns>,8
items</param>,8
{},8
<returns>`OptionAsync&lt;Set&lt;A&gt;&gt;`,8
.NET,8
<returns>`TryAsync&lt;Lst&lt;A&gt;&gt;`,8
<returns>`TryAsync&lt;OptionUnsafe&lt;A&gt;&gt;`,8
Retrieves,8
supplies,8
\name="\C"\>Mapped\,8
occur,8
<returns>`TryAsync&lt;Task&lt;B&gt;&gt;`,8
act(thereIs);,8
\name,\,8
raised,8
Bi-fold,8
<returns>`OptionAsync&lt;Lst&lt;A&gt;&gt;`,8
<returns>`OptionAsync&lt;TryAsync&lt;B&gt;&gt;`,8
control,8
Joins,8
Console.WriteLine(x));,8
take,8
monoid,8
<returns>`OptionAsync&lt;OptionAsync&lt;B&gt;&gt;`,8
fun((int,8
<returns>`TryOptionAsync&lt;TryAsync&lt;B&gt;&gt;`,8
<returns>`Task&lt;TryAsync&lt;B&gt;&gt;`,8
\name="\f"\>Bind\,8
\Either,\,8
dropping,8
\name="\ma"\>Either\,8
Key/Value,8
<returns>Updated,8
if(a,8
support,8
See,8
Not,8
HashSet&lt;B&gt;&gt;`</returns>,8
<returns>`TryAsync&lt;Try&lt;A&gt;&gt;`,8
Console.WriteLine(x),8
<returns>`OptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,8
<returns>`TryAsync&lt;TryAsync&lt;B&gt;&gt;`,8
maximum,8
\name="\fb"\>sequence\,8
rightMap,8
retained,8
<returns>`TryOptionAsync&lt;Task&lt;B&gt;&gt;`,8
<returns>`TryAsync&lt;OptionAsync&lt;B&gt;&gt;`,8
words,8
\Func&lt;string,\,8
Equivalent,8
(as,8
Look,8
arbitrary,8
multi-item,8
<returns>`Task&lt;Task&lt;B&gt;&gt;`,8
bits,8
usage,8
\name="\zipper"\>Join\,8
<returns>`TryAsync&lt;Arr&lt;A&gt;&gt;`,8
Set&lt;B&gt;&gt;`</returns>,8
<returns>`Task&lt;TryOption&lt;A&gt;&gt;`,8
IEnumerables,8
<returns>`Task&lt;Set&lt;A&gt;&gt;`,8
`MA`,8
\name="\Right"\>Predicate</param>\,8
<returns>`Task&lt;Lst&lt;A&gt;&gt;`,8
your,8
Arr&lt;B&gt;&gt;`</returns>,8
options,8
<returns>`TryOptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,8
Tri-fold,8
old,8
<returns>`Task&lt;TryOptionAsync&lt;B&gt;&gt;`,8
helper;,8
<returns>`OptionAsync&lt;HashSet&lt;A&gt;&gt;`,8
\name="\value"\>Right\,8
\name="\Term1"\>First\,8
Action&lt;string&gt;,8
d),8
<returns>`Task&lt;Try&lt;A&gt;&gt;`,8
pass,7
\name="\SuccAsync"\>Delegate\,7
\name="\list"\>First\,7
newly,7
<returns>IEnumerator,7
contain,7
becomes,7
arithmetic,7
\name="\rhs"\>Second\,7
term,7
\name="\B"\></typeparam>\,7
`true`</returns>,7
merged,7
comments,7
nor,7
scans,7
FloatType,7
errors,7
Tail,7
processing,7
raising,7
<returns>False</returns>,7
Functional,7
\name="\arg2"\>Try\,7
sure,7
\name="\B"\>Returned\,7
'value',7
`MB`,7
equal;,7
<remarks>Note,7
\name="\failValue"\>Default\,7
\name="\v"\>Bound\,7
\note,\,7
implication,7
accessors,7
fractional,7
<returns>Concatenated,7
\IEnumerable,\,7
null</remarks>,7
declare,7
>=,7
similar,7
\`b`,\,7
'where',7
instances,7
variant,7
implementing,7
\W,\,7
aware,7
\is,\,7
<returns>State,7
breaks,7
thrown,7
consumed,7
<returns>`OptionAsync&lt;IEnumerable&lt;A&gt;&gt;`,7
\name="\Ret"\></typeparam>\,7
EitherAsync</returns>,7
Deserialisation,7
<returns>True</returns>,7
Rs</returns>,7
\name="\arg1"\>Try\,7
\name="\A"\>First\,7
break,7
Writer,7
very,7
<returns>`TryOptionAsync&lt;IEnumerable&lt;A&gt;&gt;`,7
associativity,7
K,7
'set'</returns>,7
variable,7
`Succ`,7
\Some,\,7
\name="\W"\>Type\,7
extension,7
target,7
tail,7
Useful,7
underlying,7
R2</returns>,7
\name="\B"\>Second\,7
x</param>,7
\Monad<Unit,\,7
`a`</returns>,7
makes,7
\name="\ma"\>Try\,7
needlessly,7
neither,7
trigger,7
<returns>`TryAsync&lt;IEnumerable&lt;A&gt;&gt;`,7
Rs,7
Attempts,7
\name="\tryDel"\>Try\,7
Numeric,7
grammar,7
means,7
Then,7
every,7
bi-conditional,7
rightValue,7
Helper,7
implies,7
\name="\K"\>Key\,7
\TInt,\,7
\name="\lhs"\>First\,7
`Success`,7
<returns>`Task&lt;IEnumerable&lt;A&gt;&gt;`,7
Gets,7
Also,7
Bind,7
\name="\self"\>computation\,7
Haskell,7
`Validation`,7
expression),7
set.</remarks>,7
\,\,7
literal,7
\name="\A"\>sequence\,7
<returns>Some(T),7
exists),7
\null,\,6
times,6
ma),6
<c>e^x</c></returns>,6
\name="\item"\>Item\,6
16-bit,6
upon,6
`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</param>,6
`TryOption&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
<returns>`Seq&lt;OptionAsync&lt;B&gt;&gt;`,6
\['c'],[]]\,6
<c>tanh(x)</c></returns>,6
Metres(double,6
`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</param>,6
lhs.Divide(rhs);,6
type's,6
.With&lt;ArgumentNullException&gt;(e,6
`Try&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
\name="\head"\>Head\,6
<summary>Raises,6
`Set&lt;Seq&lt;A&gt;&gt;`</param>,6
`k`,6
duplicates,6
`HashSet&lt;Lst&lt;A&gt;&gt;`</param>,6
`HashSet&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
<returns>`Try&lt;Task&lt;B&gt;&gt;`,6
created,6
MONADB,6
`Arr&lt;Try&lt;A&gt;&gt;`</param>,6
\name="\self"\>Foldable\,6
\tails(['a','b','c'])\,6
`Option&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
aid,6
<returns>`Option&lt;TryOptionAsync&lt;B&gt;&gt;`,6
<returns>`HashSet&lt;TryOptionAsync&lt;B&gt;&gt;`,6
Does,6
`Left`,6
`Seq&lt;Arr&lt;A&gt;&gt;`</param>,6
values</typeparam>,6
<returns>`Lst&lt;Task&lt;B&gt;&gt;`,6
strongly,6
(t.Tag,6
affecting,6
(),6
'early,6
exponential</param>,6
messages,6
\<c>acos(x)</c>,\,6
\Func<A,\,6
`Set&lt;Try&lt;A&gt;&gt;`</param>,6
`HashSet&lt;Try&lt;A&gt;&gt;`</param>,6
`Try&lt;HashSet&lt;A&gt;&gt;`</param>,6
`Set&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
asynchronously</param>,6
NewType(x),6
ever,6
No,6
\str("\let"\)\,6
<returns>Enumerable,6
value-types,6
`TryOption&lt;Try&lt;A&gt;&gt;`</param>,6
accepted</exception>,6
`Either`,6
`Try&lt;Lst&lt;A&gt;&gt;`</param>,6
`TryOption&lt;Arr&lt;A&gt;&gt;`</param>,6
`Lst&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
`Arr&lt;HashSet&lt;A&gt;&gt;`</param>,6
`p`,6
.Left(...),6
`Option&lt;HashSet&lt;A&gt;&gt;`</param>,6
`Set&lt;Option&lt;A&gt;&gt;`</param>,6
<returns>Context,6
using(...),6
boxing,6
<returns>`Try&lt;TryOptionAsync&lt;B&gt;&gt;`,6
reversed,6
\.Otherwise("\Not\,6
https://wiki.haskell.org/Newtype,6
`IEnumerable&lt;Arr&lt;A&gt;&gt;`</param>,6
Try</returns>,6
`Lst&lt;Set&lt;A&gt;&gt;`</param>,6
`Option&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
<returns>`TryOption&lt;OptionAsync&lt;B&gt;&gt;`,6
Context,6
`Option&lt;Arr&lt;A&gt;&gt;`</param>,6
`Option&lt;Seq&lt;A&gt;&gt;`</param>,6
<returns>0,6
\"\It's\,6
`IEnumerable&lt;TryOption&lt;A&gt;&gt;`</param>,6
\ma,\,6
type.</returns>,6
issues,6
logarithm.</param>,6
inspired,6
hasn't,6
operation:,6
\<c>asin(x)</c>,\,6
(like,6
`OptionUnsafe&lt;Option&lt;A&gt;&gt;`</param>,6
ReplyTag.OK),6
segments,6
<returns>`Lst&lt;TryOptionAsync&lt;B&gt;&gt;`,6
<summary>Calculates,6
<returns>`TryOption&lt;Task&lt;B&gt;&gt;`,6
Taking,6
Haskell's,6
`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
\monad,\,6
formatting,6
str,6
backwards,6
'newtype',6
\Comparable,\,6
InvalidOperationException,6
<returns>`Set&lt;TryAsync&lt;B&gt;&gt;`,6
fun,6
\name="\pairs"\>Range\,6
\name="\LeftAsync"\>Function\,6
`Lst&lt;Option&lt;A&gt;&gt;`</param>,6
\cref="\InvalidOperationException"\>Stack\,6
Zero,6
\name="\RightAsync"\>Function\,6
clock,6
legal,6
<returns>`HashSet&lt;Task&lt;B&gt;&gt;`,6
\name="\Else"\>The\,6
`Try&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
IMultiplicable,6
\name="\leftValue"\>Value\,6
`Set&lt;Set&lt;A&gt;&gt;`</param>,6
respect,6
(first),6
\<c>atan(x)</c>,\,6
`HashSet&lt;Seq&lt;A&gt;&gt;`</param>,6
\Bind<MONADB,\,6
failure,6
<returns>`Set&lt;OptionAsync&lt;B&gt;&gt;`,6
\"\Arg\,6
cancels,6
`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
\[['a','b','c'],\,6
<returns>`IEnumerable&lt;OptionAsync&lt;B&gt;&gt;`,6
<returns>`Seq&lt;TryAsync&lt;B&gt;&gt;`,6
legacy,6
(only,6
`Option&lt;Set&lt;A&gt;&gt;`</param>,6
extracting,6
`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
`Lst&lt;TryOption&lt;A&gt;&gt;`</param>,6
\Functor,\,6
`Try&lt;TryOption&lt;A&gt;&gt;`</param>,6
found</exception>,6
Remarks:,6
`Lst&lt;Try&lt;A&gt;&gt;`</param>,6
`IEnumerable&lt;HashSet&lt;A&gt;&gt;`</param>,6
\bind,\,6
\name="\None"\>Function\,6
<returns>`Lst&lt;OptionAsync&lt;B&gt;&gt;`,6
combine,6
this:,6
\name="\self"\>List</param>\,6
however,6
isnull(value).</returns>,6
lines,6
bank,6
inside,6
Head,6
\['b','c'],\,6
`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
<returns>`Arr&lt;TryAsync&lt;B&gt;&gt;`,6
Right</returns>,6
`Seq&lt;HashSet&lt;A&gt;&gt;`</param>,6
EqualityComparer.Default,6
<returns>`Arr&lt;Task&lt;B&gt;&gt;`,6
apply</typeparam>,6
t.Reply.Tag,6
type-class</typeparam>,6
`IEnumerable&lt;Seq&lt;A&gt;&gt;`</param>,6
Alias,6
`Seq&lt;Set&lt;A&gt;&gt;`</param>,6
`Seq&lt;Try&lt;A&gt;&gt;`</param>,6
`Set&lt;Lst&lt;A&gt;&gt;`</param>,6
`Seq&lt;TryOption&lt;A&gt;&gt;`</param>,6
`Seq&lt;Seq&lt;A&gt;&gt;`</param>,6
<c>x^y</c>.</returns>,6
.With&lt;SystemException&gt;(e,6
`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
report,6
\name="\value"\></param>\,6
<c>acosh(x)</c>.</returns>,6
`IEnumerable&lt;Lst&lt;A&gt;&gt;`</param>,6
<returns>`Try&lt;TryAsync&lt;B&gt;&gt;`,6
\name="\items"\>Items</param>\,6
\Appendable,\,6
different,6
\null"\)\,6
`IEnumerable&lt;Try&lt;A&gt;&gt;`</param>,6
exponential,6
Handles,6
\name="\noneHandler"\>None\,6
\A>(lhs,\,6
<returns>Return,6
`IEnumerable&lt;Option&lt;A&gt;&gt;`</param>,6
IDivisible,6
`TryOption&lt;TryOption&lt;A&gt;&gt;`</param>,6
///,6
<returns>`OptionUnsafe&lt;Task&lt;B&gt;&gt;`,6
size,6
<returns>`Try&lt;OptionAsync&lt;B&gt;&gt;`,6
compares,6
`Lst&lt;Lst&lt;A&gt;&gt;`</param>,6
`Arr&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
<c>sin(x)</c></returns>,6
Value-types,6
ask<string>(),6
`IEnumerable&lt;Set&lt;A&gt;&gt;`</param>,6
\name="\RightAsync"\>Right\,6
`Set&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
MB,6
in-order,6
lhs.Subtract(rhs);,6
\exception"\)\,6
<returns>`Lst&lt;TryAsync&lt;B&gt;&gt;`,6
<returns>`Seq&lt;TryOptionAsync&lt;B&gt;&gt;`,6
calculated.</param>,6
Reader,6
B),6
Eq,6
`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</param>,6
code</returns>,6
\stack,\,6
`TryOption&lt;HashSet&lt;A&gt;&gt;`</param>,6
compatibility</remarks>,6
`Lst&lt;Seq&lt;A&gt;&gt;`</param>,6
get:,6
conversions,6
followed,6
`Seq&lt;IEnumerable&lt;A&gt;&gt;`</param>,6
Subsequent,6
`HashSet&lt;Set&lt;A&gt;&gt;`</param>,6
<returns>`HashSet&lt;OptionAsync&lt;B&gt;&gt;`,6
precision,6
convenience,6
`Set&lt;TryOption&lt;A&gt;&gt;`</param>,6
ResultTag.Empty,6
<returns>`HashSet&lt;TryAsync&lt;B&gt;&gt;`,6
reservedOp(name),6
`Set&lt;Arr&lt;A&gt;&gt;`</param>,6
implicitly,6
`Try&lt;Arr&lt;A&gt;&gt;`</param>,6
<returns>`OptionUnsafe&lt;OptionAsync&lt;B&gt;&gt;`,6
here,6
\equals<EQ,\,6
\Left,\,6
`Option&lt;Lst&lt;A&gt;&gt;`</param>,6
`TryOption&lt;Lst&lt;A&gt;&gt;`</param>,6
<returns>`Set&lt;TryOptionAsync&lt;B&gt;&gt;`,6
MB>,6
`Seq&lt;Option&lt;A&gt;&gt;`</param>,6
<c>log,6
<c>cos(x)</c></returns>,6
`OptionUnsafe&lt;Set&lt;A&gt;&gt;`</param>,6
<returns>`Option&lt;TryAsync&lt;B&gt;&gt;`,6
`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</param>,6
<returns>`IEnumerable&lt;TryOptionAsync&lt;B&gt;&gt;`,6
OptionUnsafes,6
`Lst&lt;HashSet&lt;A&gt;&gt;`</param>,6
`Option&lt;Option&lt;A&gt;&gt;`</param>,6
`Arr&lt;Option&lt;A&gt;&gt;`</param>,6
await,6
<c>sqrt(x)</c>.</returns>,6
handle,6
<c>sinh(x)</c></returns>,6
`Arr&lt;Arr&lt;A&gt;&gt;`</param>,6
\Foldable,\,6
\name="\foldable"\>Foldable</param>\,6
<returns>`IEnumerable&lt;TryAsync&lt;B&gt;&gt;`,6
empty</exception>,6
name,6
`Option&lt;TryOption&lt;A&gt;&gt;`</param>,6
\`Either`,\,6
root.</param>,6
Peek,6
separately,6
<returns>`TryOption&lt;TryAsync&lt;B&gt;&gt;`,6
`TryOption&lt;Seq&lt;A&gt;&gt;`</param>,6
floating-point,6
Flatten,6
<c>asinh(x)</c>.</returns>,6
`Try&lt;Set&lt;A&gt;&gt;`</param>,6
<c>atanh(x)</c></returns>,6
`Arr&lt;Lst&lt;A&gt;&gt;`</param>,6
`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,6
handling,6
`Set&lt;HashSet&lt;A&gt;&gt;`</param>,6
<returns>`Set&lt;Task&lt;B&gt;&gt;`,6
`Lst&lt;Arr&lt;A&gt;&gt;`</param>,6
<returns>Writer,6
Each,6
radians.</returns>,6
log,6
`OptionUnsafe&lt;Try&lt;A&gt;&gt;`</param>,6
non-null</param>,6
sine</summary>,6
<returns>`Option&lt;Task&lt;B&gt;&gt;`,6
`Try&lt;Seq&lt;A&gt;&gt;`</param>,6
\Equatable,\,6
text,6
\name="\Tail"\>Match\,6
Skips,6
<c>ln(x)</c>.</returns>,6
according,6
To,6
\name="\value"\>Either\,6
\string>(lhs,\,6
one),6
\name="\right"\>Action\,6
`HashSet&lt;TryOption&lt;A&gt;&gt;`</param>,6
automatically,6
operations</returns>,6
it.</returns>,6
<returns>`TryOption&lt;TryOptionAsync&lt;B&gt;&gt;`,6
<returns>`Arr&lt;TryOptionAsync&lt;B&gt;&gt;`,6
\name="\LeftAsync"\>Left\,6
`HashSet&lt;Option&lt;A&gt;&gt;`</param>,6
`Arr&lt;TryOption&lt;A&gt;&gt;`</param>,6
stack</returns>,6
k)`,6
<returns>`Option&lt;OptionAsync&lt;B&gt;&gt;`,6
`TryOption&lt;Set&lt;A&gt;&gt;`</param>,6
`HashSet&lt;Arr&lt;A&gt;&gt;`</param>,6
HSet</returns>,6
IDictionary,6
<returns>`OptionUnsafe&lt;TryOptionAsync&lt;B&gt;&gt;`,6
<c>cosh(x)</c></returns>,6
\handled"\)\,6
y</param>,6
HSet</param>,6
`Seq&lt;Lst&lt;A&gt;&gt;`</param>,6
`Arr&lt;Set&lt;A&gt;&gt;`</param>,6
<returns>Unioned,6
`HashSet&lt;HashSet&lt;A&gt;&gt;`</param>,6
Array,6
`TryOption&lt;Option&lt;A&gt;&gt;`</param>,6
`Option&lt;Try&lt;A&gt;&gt;`</param>,6
<returns>`Seq&lt;Task&lt;B&gt;&gt;`,6
<returns>`Arr&lt;OptionAsync&lt;B&gt;&gt;`,6
\int[]>(lhs,\,6
letter,6
Some(y),6
NewType(y),6
Clear,6
combined,6
tried,6
`Try&lt;Option&lt;A&gt;&gt;`</param>,6
`Arr&lt;Seq&lt;A&gt;&gt;`</param>,6
trailing,6
<returns>`IEnumerable&lt;Task&lt;B&gt;&gt;`,6
\name="\FUV"\>Target\,6
`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</param>,6
\cref="\ArgumentNullException"\>Null\,6
m1,6
<returns>Tuples</returns>,6
<c>tan(x)</c></returns>,6
<returns>`OptionUnsafe&lt;TryAsync&lt;B&gt;&gt;`,6
`Try&lt;Try&lt;A&gt;&gt;`</param>,6
v2,5
(y)</c>.</returns>,5
skips,5
tell</param>,5
location,5
z,5
\name="\A"\>Input\,5
\`Validation<MonoidFail,\,5
(a,5
calculates,5
\name="\keyTo"\>Range\,5
<returns>`OptionAsync&lt;Set&lt;B&gt;&gt;`,5
requirement),5
<returns>`Task&lt;Lst&lt;B&gt;&gt;`,5
0),5
keyFrom,5
carries,5
<returns>`TryOptionAsync&lt;Lst&lt;B&gt;&gt;`,5
leaving,5
\name="\FA"\>Source\,5
\name="\value"\>`value`,\,5
unchanged,5
<returns>`TryOptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,5
whole,5
extensions,5
\to,\,5
operand,5
\name="\option"\>None\,5
(distinct),5
\name="\rightValue"\>Value\,5
\name="\binder"\></param>\,5
groupoid,5
<returns>`TryAsync&lt;TryOption&lt;B&gt;&gt;`,5
\name="\predicate"\>Predicate\,5
TryAsync(y),5
A.</param>,5
`null`.</param>,5
divided,5
Skip,5
<returns>`Task&lt;TryOption&lt;B&gt;&gt;`,5
only),5
\name="\UR"\>Mapped\,5
\name="\DIFF"\>Subtract\,5
<returns>`TryOptionAsync&lt;Option&lt;B&gt;&gt;`,5
long,5
<returns>`TryOptionAsync&lt;Set&lt;B&gt;&gt;`,5
remaining,5
\run,\,5
synchronous,5
\name="\e"\>Exception\,5
catch,5
<returns>`OptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,5
\name="\xs"\>Sequence\,5
mb),5
rest,5
\name="\other"\>The\,5
(hence,5
absolutely,5
optional</param>,5
how,5
line,5
found</param>,5
provider:,5
<returns>`OptionAsync&lt;Option&lt;B&gt;&gt;`,5
<returns>`TryOptionAsync&lt;Arr&lt;B&gt;&gt;`,5
<auto-generated/>,5
divisor:,5
h1,5
5);,5
TryOptionAsync(y),5
\name="\amount"\>Amount\,5
generates,5
t</param>,5
<returns>Some(Right),5
\name="\unfolder"\>Unfold\,5
(Where,5
tail;,5
kind,5
quickly,5
\2,\,5
various,5
\transformer,\,5
succeed,5
<returns>`Task&lt;Seq&lt;B&gt;&gt;`,5
stored,5
these,5
Millimetre,5
Assert.True(counter,5
v1,5
unfold,5
<returns>`Task&lt;OptionUnsafe&lt;B&gt;&gt;`,5
unit-of-measure,5
\name="\FB"\>Target\,5
\name="\tail"\>Tail\,5
definitely,5
identity,5
<returns>`TryAsync&lt;HashSet&lt;B&gt;&gt;`,5
commonly,5
selector,5
over</param>,5
`Patch`,5
memoizes,5
<returns>`TryAsync&lt;Arr&lt;B&gt;&gt;`,5
Calculate,5
intial,5
<returns>`OptionAsync&lt;TryOption&lt;B&gt;&gt;`,5
\name="\list"\>Sequence\,5
Usually,5
async,5
<returns>`Task&lt;Set&lt;B&gt;&gt;`,5
Conditional,5
<returns>`Task&lt;Arr&lt;B&gt;&gt;`,5
120,5
converted,5
Tells,5
internal,5
knows,5
better,5
\upwards,\,5
memory,5
key</param>,5
correct,5
<returns>`TryAsync&lt;Set&lt;B&gt;&gt;`,5
\(s,\,5
\},\,5
\30,40,50\,5
\name="\V"\>Value\,5
implement,5
EitherAsync,5
tell</typeparam>,5
Task.FromResult(x),5
Calls,5
inverse,5
<returns>`TryAsync&lt;Option&lt;B&gt;&gt;`,5
you're,5
\name="\None"\>delegate\,5
assembly,5
faulted),5
Censor,5
TryAsync(x),5
merging,5
\name="\value"\>Item\,5
'unfolding',5
value',5
n)`,5
nullable,5
<returns>`Task&lt;Try&lt;B&gt;&gt;`,5
Ordering,5
'packet',5
<returns>`TryAsync&lt;Lst&lt;B&gt;&gt;`,5
<returns>`TryAsync&lt;Try&lt;B&gt;&gt;`,5
comment,5
TryOptionAsync(x),5
coalescing,5
Select,5
\10,20,30,40,50\,5
`null`</exception>,5
builds,5
<returns>`Task&lt;HashSet&lt;B&gt;&gt;`,5
Coalescing,5
Can,5
<returns>`OptionAsync&lt;Seq&lt;B&gt;&gt;`,5
actually,5
\L,\,5
reasonable,5
construction,5
\name="\what"\>The\,5
modify,5
|,5
\name="\index"\></param>\,5
hold,5
\name="\tail"\>The\,5
skipped,5
Index,5
<returns>`TryOptionAsync&lt;Try&lt;B&gt;&gt;`,5
<returns>`OptionAsync&lt;Arr&lt;B&gt;&gt;`,5
byte,5
<returns>`Task&lt;Option&lt;B&gt;&gt;`,5
<returns>`TryAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,5
\name="\B"\>Target\,5
<returns>`TryOptionAsync&lt;Seq&lt;B&gt;&gt;`,5
null;,5
Compares,5
\name="\PROD"\>Product\,5
<returns>`OptionAsync&lt;Try&lt;B&gt;&gt;`,5
Set</returns>,5
\name="\keyFrom"\>Range\,5
\name="\f"\>Map\,5
dividend:,5
<returns>`TryOptionAsync&lt;HashSet&lt;B&gt;&gt;`,5
negative,5
\name="\items"\></param>\,5
'amount',5
<returns>Unfolded,5
\cref="\ValueIsNullException"\>`value`\,5
`Unit`,5
\than,\,5
(the,5
\example,\,5
type</returns>,5
hear,5
\name="\DIV"\>Divide\,5
\name="\from"\>The\,5
'func',5
Exists,5
\name="\Left"\>Value\,5
<returns>Range,5
nest,5
<returns>`TryAsync&lt;Seq&lt;B&gt;&gt;`,5
keyTo,5
v),5
skip</param>,5
type:,5
ignore,5
Succ(value),5
<returns>`OptionAsync&lt;HashSet&lt;B&gt;&gt;`,5
specific,5
instantiate,5
<returns>`TryOptionAsync&lt;TryOption&lt;B&gt;&gt;`,5
SUCCESS>`,5
<returns>`OptionAsync&lt;Lst&lt;B&gt;&gt;`,5
`Arr&lt;Try&lt;A&gt;&gt;`</returns>,4
Fail-identity,4
`Lst&lt;Arr&lt;A&gt;&gt;`</returns>,4
reduce,4
\`TryOption&lt;Seq&lt;A&gt;&gt;`,\,4
enumerable</param>,4
<returns>`IEnumerable&lt;TryOptionAsync&lt;C&gt;&gt;`,4
\`Try&lt;Arr&lt;A&gt;&gt;`,\,4
m,4
></typeparam>,4
\`IEnumerable&lt;TryOption&lt;A&gt;&gt;`,\,4
<returns>Flatmapped,4
Not(b))`</returns>,4
<returns>`Set&lt;OptionAsync&lt;C&gt;&gt;`,4
\name="\Success"\>Folder\,4
Metre,4
`IEnumerable&lt;Try&lt;A&gt;&gt;`</returns>,4
\name="\Left"\>Predicate</param>\,4
<returns>`TryOptionAsync&lt;TryOptionAsync&lt;C&gt;&gt;`,4
\FloatType<Metres,\,4
\`Option&lt;IEnumerable&lt;A&gt;&gt;`,\,4
\`Seq&lt;Try&lt;A&gt;&gt;`,\,4
<remarks>To,4
such,4
Seq&lt;C&gt;&gt;`,4
Supports,4
`Lst&lt;TryOption&lt;A&gt;&gt;`</returns>,4
<returns>`Try&lt;Task&lt;C&gt;&gt;`,4
Hour,4
(IEnumerable),4
Option&lt;C&gt;&gt;`,4
`HashSet&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
class-instance,4
MOptionUnsafe,4
ascending,4
cast,4
`Seq&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
<returns>`Set&lt;TryAsync&lt;C&gt;&gt;`,4
Execute,4
TryOption&lt;C&gt;&gt;`,4
`TryOption&lt;TryOption&lt;A&gt;&gt;`</returns>,4
Succ(x),4
\name="\A"\>List\,4
map(Result),4
<returns>`TryOptionAsync&lt;TryAsync&lt;C&gt;&gt;`,4
validation,4
\name="\FA"\>Type\,4
`Lst&lt;Set&lt;A&gt;&gt;`</returns>,4
Thread-safe,4
effect,4
`Option&lt;Try&lt;A&gt;&gt;`</returns>,4
(possibly,4
`Try&lt;Try&lt;A&gt;&gt;`</returns>,4
`IEnumerable&lt;Arr&lt;A&gt;&gt;`</returns>,4
\`Lst&lt;Arr&lt;A&gt;&gt;`,\,4
\`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`,\,4
(see,4
Special,4
Memoize,4
\"\e"\);\,4
\operators,\,4
skipMany(p),4
<returns>`Option&lt;TryOptionAsync&lt;C&gt;&gt;`,4
`Lst&lt;Option&lt;A&gt;&gt;`</returns>,4
`composed`,4
\`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
`Try&lt;Set&lt;A&gt;&gt;`</returns>,4
null</param>,4
\name="\msg"\>Error\,4
\`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`,\,4
foldable</returns>,4
table.Return,4
\`IEnumerable&lt;Arr&lt;A&gt;&gt;`,\,4
Validates,4
e.g,4
<returns>`TryAsync&lt;Task&lt;C&gt;&gt;`,4
valueDescriptionLess,4
\folder(state,Result)\,4
<returns>`TryAsync&lt;TryAsync&lt;C&gt;&gt;`,4
<returns>Promise,4
applicative</returns>,4
Standard,4
<returns>`Lst&lt;Task&lt;C&gt;&gt;`,4
<returns>`TryAsync&lt;IEnumerable&lt;B&gt;&gt;`,4
try,4
`OptionUnsafe&lt;Try&lt;A&gt;&gt;`</returns>,4
`OptionUnsafe&lt;Set&lt;A&gt;&gt;`</returns>,4
<returns>`TryOptionAsync&lt;OptionAsync&lt;C&gt;&gt;`,4
\`Option&lt;TryOption&lt;A&gt;&gt;`,\,4
\times,\,4
`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
cok),4
\`Lst&lt;Seq&lt;A&gt;&gt;`,\,4
<returns>`TryOptionAsync&lt;IEnumerable&lt;B&gt;&gt;`,4
succeeding,4
Bi-map,4
\name="\A"\>Succ</typeparam>\,4
<returns>Seq,4
\`Try&lt;Lst&lt;A&gt;&gt;`,\,4
\`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
`RecordType<A>`,4
`HashSet&lt;Set&lt;A&gt;&gt;`</returns>,4
Bitwise,4
initialise,4
Type,4
Push,4
\`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
`Try&lt;Option&lt;A&gt;&gt;`</returns>,4
digit,4
Assoc.Left),4
optionally,4
`Lst&lt;Lst&lt;A&gt;&gt;`</returns>,4
'Fail',4
<returns>`Task&lt;Task&lt;C&gt;&gt;`,4
(cached),4
\either(letExpr,\,4
Unsorted,4
<returns>Option<T>,4
delta,4
b(a(v))</returns>,4
<returns>`Try&lt;OptionAsync&lt;C&gt;&gt;`,4
\bool),\,4
`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</returns>,4
\`Option&lt;Lst&lt;A&gt;&gt;`,\,4
\"\b"\);\,4
\name="\fa"\>First\,4
`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
outcome,4
\`TryOption&lt;IEnumerable&lt;A&gt;&gt;`,\,4
\name="\Term3"\>Third\,4
<returns>`IEnumerable&lt;TryAsync&lt;C&gt;&gt;`,4
\`Option&lt;Arr&lt;A&gt;&gt;`,\,4
`Set&lt;HashSet&lt;A&gt;&gt;`</returns>,4
\`Arr&lt;Lst&lt;A&gt;&gt;`,\,4
fast,4
`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</returns>,4
`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\"\D"\),\,4
yielded,4
'unexpected',4
<returns>Zero,4
\`OptionUnsafe&lt;Option&lt;A&gt;&gt;`,\,4
Primarily,4
'Try',4
subsequence,4
(0),4
Arr&lt;C&gt;&gt;`,4
\[],\,4
setup,4
`IEnumerable&lt;HashSet&lt;A&gt;&gt;`</returns>,4
still,4
append</param>,4
choice(ps),4
\"\a"\);\,4
`Set&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
skipping,4
ps,4
Imperative,4
<returns>Last,4
\name="\Success"\>Predicate</param>\,4
\name="\a"\>Unit\,4
\equals<EqArray<int>,\,4
\'failure',\,4
\unexpected,\,4
\mzero,\,4
`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
1),4
<returns>`Task&lt;TryAsync&lt;C&gt;&gt;`,4
<returns>`Try&lt;TryAsync&lt;C&gt;&gt;`,4
combinators,4
lexical,4
\Tuple(5,\,4
`TryOption&lt;Arr&lt;A&gt;&gt;`</returns>,4
\`mb`,\,4
<returns>Hash-code,4
MA,4
MOptionAsync,4
Assert.True(res,4
etc.</typeparam>,4
edit,4
<returns>`OptionUnsafe&lt;Task&lt;C&gt;&gt;`,4
successful</returns>,4
<returns>Subtractd,4
<returns>Validation,4
Kilometre,4
`Option&lt;Lst&lt;A&gt;&gt;`</returns>,4
\`Option&lt;Seq&lt;A&gt;&gt;`,\,4
\directly,\,4
`Seq&lt;HashSet&lt;A&gt;&gt;`</returns>,4
`Set&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\name="\Fail"\>Fail\,4
pretends,4
`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
SomeUnsafe(4));,4
\IfSucc,\,4
\`Arr&lt;TryOption&lt;A&gt;&gt;`,\,4
\`Try&lt;TryOption&lt;A&gt;&gt;`,\,4
\`Try&lt;IEnumerable&lt;A&gt;&gt;`,\,4
\name="\RightAsync"\>Folder\,4
Success:,4
`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\`Try&lt;Set&lt;A&gt;&gt;`,\,4
Intersect,4
\`TryOption&lt;Set&lt;A&gt;&gt;`,\,4
OptionUnsafe&lt;C&gt;&gt;`,4
complexity,4
\name="\rightMap"\>Function\,4
<returns>`Task&lt;IEnumerable&lt;B&gt;&gt;`,4
\name="\rhs"\>Stack\,4
\"\c"\);\,4
<returns>`TryOptionAsync&lt;Task&lt;C&gt;&gt;`,4
threaded,4
Set&lt;C&gt;&gt;`,4
\`Arr&lt;Set&lt;A&gt;&gt;`,\,4
null),4
<returns>Aggregated,4
\name="\EQ"\>Eq<A>\,4
step,4
`Option&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\3,\,4
`tails`,4
\parsers,\,4
\name="\FABC"\>Source\,4
<returns>[x],4
seen,4
function</typeparam>,4
`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\`Arr&lt;Seq&lt;A&gt;&gt;`,\,4
\name="\f"\>Fold\,4
\`Try`,\,4
(current,4
Internally,4
`Try&lt;TryOption&lt;A&gt;&gt;`</returns>,4
`Arr&lt;Seq&lt;A&gt;&gt;`</returns>,4
<returns>`TryAsync&lt;TryOptionAsync&lt;C&gt;&gt;`,4
equality</param>,4
general,4
\b),\,4
list:,4
<returns>`TryOption&lt;TryAsync&lt;C&gt;&gt;`,4
\name="\select"\>Delegate\,4
Failure</returns>,4
\Assoc.Left),\,4
\`IEnumerable&lt;Option&lt;A&gt;&gt;`,\,4
concatenate,4
`Arr&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\required,\,4
\`Set&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
\TFloat,\,4
\`Set&lt;TryOption&lt;A&gt;&gt;`,\,4
\`Seq&lt;Set&lt;A&gt;&gt;`,\,4
\`TryOption&lt;TryOption&lt;A&gt;&gt;`,\,4
collected,4
<returns>`IEnumerable&lt;OptionAsync&lt;C&gt;&gt;`,4
9),4
\name="\B"\>Bound\,4
tri-functor,4
<returns>`TryAsync&lt;OptionAsync&lt;C&gt;&gt;`,4
\name="\array"\>Array</param>\,4
past,4
System.Decimal,4
`Try&lt;Lst&lt;A&gt;&gt;`</returns>,4
\State<S,\,4
setB</returns>,4
Lazy,4
If/Then,4
None(Value),4
\name="\B"\>Mapped\,4
<returns>First,4
expect,4
`Set&lt;Lst&lt;A&gt;&gt;`</returns>,4
`Seq&lt;Try&lt;A&gt;&gt;`</returns>,4
<returns>`Arr&lt;Task&lt;C&gt;&gt;`,4
`Arr&lt;Lst&lt;A&gt;&gt;`</returns>,4
`IEnumerable&lt;Lst&lt;A&gt;&gt;`</returns>,4
<returns>`Task&lt;OptionAsync&lt;C&gt;&gt;`,4
validly,4
Extensions,4
\Tuple(3,\,4
\`Seq&lt;Seq&lt;A&gt;&gt;`,\,4
<returns>`Seq&lt;TryAsync&lt;C&gt;&gt;`,4
c)</typeparam>,4
\`OptionUnsafe&lt;Set&lt;A&gt;&gt;`,\,4
x.Try()</remarks>,4
\`IEnumerable&lt;Try&lt;A&gt;&gt;`,\,4
`Option&lt;HashSet&lt;A&gt;&gt;`</returns>,4
'True',4
`Set&lt;Set&lt;A&gt;&gt;`</returns>,4
Some(value)</returns>,4
\equals<EqString,\,4
key</remarks>,4
`TryOption&lt;Lst&lt;A&gt;&gt;`</returns>,4
\name="\T"\></typeparam>\,4
`TryOption&lt;Option&lt;A&gt;&gt;`</returns>,4
random,4
\"\B"\),\,4
caching,4
\`Arr&lt;HashSet&lt;A&gt;&gt;`,\,4
\(Some),\,4
`MONADB`,4
\`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`,\,4
(Option<T>),4
\`Seq&lt;Arr&lt;A&gt;&gt;`,\,4
<returns>`Set&lt;Task&lt;C&gt;&gt;`,4
lhs.Multiply(rhs);,4
anything,4
rather,4
<returns>`HashSet&lt;Task&lt;C&gt;&gt;`,4
<returns>`TryOption&lt;OptionAsync&lt;C&gt;&gt;`,4
\NumType<Metres,\,4
BigInteger,4
`IEnumerable&lt;Set&lt;A&gt;&gt;`</returns>,4
\`Arr&lt;Try&lt;A&gt;&gt;`,\,4
<returns>`Set&lt;TryOptionAsync&lt;C&gt;&gt;`,4
Eithers,4
\(b,\,4
many1(letter);,4
<returns>Appended,4
`Try&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
\`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`,\,4
recursive,4
'success,4
\name="\self"\>Value\,4
<returns>`OptionUnsafe&lt;TryOptionAsync&lt;C&gt;&gt;`,4
clear</param>,4
`Lst&lt;HashSet&lt;A&gt;&gt;`</returns>,4
`IEnumerable&lt;Seq&lt;A&gt;&gt;`</returns>,4
\`Set&lt;Set&lt;A&gt;&gt;`,\,4
<returns>`Try&lt;TryOptionAsync&lt;C&gt;&gt;`,4
<returns>`TryOption&lt;Task&lt;C&gt;&gt;`,4
\`HashSet&lt;Set&lt;A&gt;&gt;`,\,4
\"\\,4
Fail(e),4
\name="\xs"\>The\,4
<returns>`HashSet&lt;TryAsync&lt;C&gt;&gt;`,4
\`Set&lt;Arr&lt;A&gt;&gt;`,\,4
<returns>c(b(a(v)))</returns>,4
<returns>OptionAsync,4
ex.Match&lt;string&gt;(),4
\name="\FB"\>Type\,4
\Tuple(4,\,4
\`TryOption&lt;HashSet&lt;A&gt;&gt;`,\,4
<returns>`Seq&lt;TryOptionAsync&lt;C&gt;&gt;`,4
differencing,4
raise,4
...;,4
result</returns>,4
Used,4
<returns>`Arr&lt;OptionAsync&lt;C&gt;&gt;`,4
computation:,4
\name="\x"\>First\,4
f(a,4
\`HashSet&lt;Arr&lt;A&gt;&gt;`,\,4
tails,4
away,4
\Match,\,4
\name="\map"\>Projection\,4
MonadAsync</returns>,4
\`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
<returns>`Seq&lt;Task&lt;C&gt;&gt;`,4
\`IEnumerable&lt;HashSet&lt;A&gt;&gt;`,\,4
\<returns>`XOr(Not(a),\,4
`x`</returns>,4
specify,4
Forces,4
`Option&lt;Seq&lt;A&gt;&gt;`</returns>,4
\types,and\,4
\`Lst&lt;TryOption&lt;A&gt;&gt;`,\,4
ForAll,4
pre-populated,4
languages,4
Indicates,4
\`HashSet&lt;HashSet&lt;A&gt;&gt;`,\,4
Iterates,4
q,4
dispatch,4
(Concat,4
\`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`,\,4
<returns>`HashSet&lt;OptionAsync&lt;C&gt;&gt;`,4
HashSet,4
\name="\Env"\>Environment</typeparam>\,4
`TryOption&lt;Set&lt;A&gt;&gt;`</returns>,4
\15,\,4
lookAhead(p),4
\name="\y"\>Second\,4
\these,\,4
v);,4
\values,\,4
summed,4
\`Lst&lt;Option&lt;A&gt;&gt;`,\,4
\`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
\"\d"\);\,4
\name="\disposable"\>Disposable\,4
`Lst&lt;Seq&lt;A&gt;&gt;`</returns>,4
\`Writer`,\,4
\`Option&lt;Set&lt;A&gt;&gt;`,\,4
IReadOnlyDictionary,4
Cons,4
<returns>`Lst&lt;TryOptionAsync&lt;C&gt;&gt;`,4
overflow,4
basic,4
ahead,4
\`Seq&lt;HashSet&lt;A&gt;&gt;`,\,4
`HashSet&lt;Arr&lt;A&gt;&gt;`</returns>,4
opt);,4
\name="\A"\>Seq\,4
Raises,4
\parser,\,4
Centimetre,4
parsed</param>,4
`Arr&lt;HashSet&lt;A&gt;&gt;`</returns>,4
`Set&lt;Arr&lt;A&gt;&gt;`</returns>,4
`Set&lt;Option&lt;A&gt;&gt;`</returns>,4
\equality,\,4
Func<T>,4
<returns>`Seq&lt;OptionAsync&lt;C&gt;&gt;`,4
(Any,4
Writers,4
\`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`,\,4
`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</returns>,4
same</returns>,4
Keys,4
\`Lst&lt;Set&lt;A&gt;&gt;`,\,4
items),4
\`TryOption&lt;Option&lt;A&gt;&gt;`,\,4
those</returns>,4
doing,4
\"\A"\),\,4
<returns>`OptionAsync&lt;TryAsync&lt;C&gt;&gt;`,4
(Or,4
_,4
`Try&lt;Arr&lt;A&gt;&gt;`</returns>,4
.None(...),4
\(W,\,4
non-stack,4
remarks,4
\4,\,4
now,4
`Seq&lt;Lst&lt;A&gt;&gt;`</returns>,4
consume,4
Typeclass,4
`TryOption&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
`Set&lt;TryOption&lt;A&gt;&gt;`</returns>,4
<returns>`Task&lt;TryOptionAsync&lt;C&gt;&gt;`,4
`Try&lt;HashSet&lt;A&gt;&gt;`</returns>,4
especially,4
Stream,4
<returns>`Option&lt;TryAsync&lt;C&gt;&gt;`,4
\`Set&lt;Try&lt;A&gt;&gt;`,\,4
\`Try&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
`Arr&lt;Option&lt;A&gt;&gt;`</returns>,4
0</returns>,4
`Run`,4
deals,4
Fluent,4
`Option&lt;TryOption&lt;A&gt;&gt;`</returns>,4
\name="\MA"\>The\,4
\`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`,\,4
h1);,4
`OptionUnsafe&lt;Option&lt;A&gt;&gt;`</returns>,4
<returns>`OptionAsync&lt;Task&lt;C&gt;&gt;`,4
\`Seq&lt;Option&lt;A&gt;&gt;`,\,4
\name="\obj"\>Object\,4
\`Option&lt;Try&lt;A&gt;&gt;`,\,4
computes,4
monads</returns>,4
executed</returns>,4
\name="\defaultValue"\>Default\,4
Floating,4
HashSet&lt;C&gt;&gt;`,4
\`Seq&lt;IEnumerable&lt;A&gt;&gt;`,\,4
`Try&lt;Seq&lt;A&gt;&gt;`</returns>,4
\`Set&lt;Option&lt;A&gt;&gt;`,\,4
\name="\ERROR"\>Error\,4
HasValue</returns>,4
`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</returns>,4
single-precision,4
\cerr,\,4
int>(y),4
<returns>0</returns>,4
`HashSet&lt;Try&lt;A&gt;&gt;`</returns>,4
produced)</returns>,4
\name="\action"\>Delegate\,4
\name="\value"\>Left\,4
\`Lst&lt;Try&lt;A&gt;&gt;`,\,4
`tailsr`,4
b(a())</returns>,4
\`(W,\,4
`Option&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\`OptionUnsafe&lt;Try&lt;A&gt;&gt;`,\,4
Compute,4
`Seq&lt;Set&lt;A&gt;&gt;`</returns>,4
Build,4
Turn,4
Concatenates,4
Result<A>,4
\name="\C"\>Source\,4
treated,4
`HashSet&lt;Option&lt;A&gt;&gt;`</returns>,4
int>,4
`TryOption&lt;Seq&lt;A&gt;&gt;`</returns>,4
`HashSet&lt;TryOption&lt;A&gt;&gt;`</returns>,4
MOption,4
\`Set&lt;HashSet&lt;A&gt;&gt;`,\,4
other.Greater,4
\identifier).label("\expression"\);\,4
shifted,4
\Writer<MonoidW,\,4
<returns>`TryOption&lt;TryOptionAsync&lt;C&gt;&gt;`,4
\`HashSet&lt;Try&lt;A&gt;&gt;`,\,4
`Set&lt;Try&lt;A&gt;&gt;`</returns>,4
\Option,\,4
<returns>`Option&lt;OptionAsync&lt;C&gt;&gt;`,4
per,4
\"\C"\),\,4
\`Set&lt;IEnumerable&lt;A&gt;&gt;`,\,4
\`Seq&lt;TryOption&lt;A&gt;&gt;`,\,4
\`IEnumerable&lt;Seq&lt;A&gt;&gt;`,\,4
other.ZeroThe,4
<returns>`OptionAsync&lt;TryOptionAsync&lt;C&gt;&gt;`,4
<returns>`Lst&lt;TryAsync&lt;C&gt;&gt;`,4
\Func<int,int>\,4
V,4
primitive,4
V>`,4
delay,4
performt,4
`mb`,4
\other,\,4
Minute,4
`TryOption&lt;Try&lt;A&gt;&gt;`</returns>,4
<returns>v,4
(OptionAsync<T>),4
Prefix,4
'Text.Parsec.Combinator.notFollowedBy',4
case),4
\`HashSet&lt;Lst&lt;A&gt;&gt;`,\,4
monadic</typeparam>,4
\`HashSet&lt;IEnumerable&lt;A&gt;&gt;`,\,4
<returns>`OptionAsync&lt;OptionAsync&lt;C&gt;&gt;`,4
`HashSet&lt;Lst&lt;A&gt;&gt;`</returns>,4
\`Lst&lt;HashSet&lt;A&gt;&gt;`,\,4
Lst&lt;C&gt;&gt;`,4
Iterable:,4
\Span,\,4
blocks,4
\name="\fb"\>Second\,4
`Arr&lt;TryOption&lt;A&gt;&gt;`</returns>,4
auto-clean,4
able,4
.Apply(SomeUnsafe(4));,4
\`Lst&lt;IEnumerable&lt;A&gt;&gt;`,\,4
\name="\f"\>Inner\,4
`TryOption&lt;HashSet&lt;A&gt;&gt;`</returns>,4
<returns>`Arr&lt;TryOptionAsync&lt;C&gt;&gt;`,4
EitherLeft,4
empty),4
`Arr&lt;Arr&lt;A&gt;&gt;`</returns>,4
`Seq&lt;Option&lt;A&gt;&gt;`</returns>,4
Produce,4
'Succ',4
\`IEnumerable&lt;Set&lt;A&gt;&gt;`,\,4
\List.span(List(1,2,3),\,4
compile,4
\`Arr&lt;Arr&lt;A&gt;&gt;`,\,4
<returns>Split,4
`Option&lt;Option&lt;A&gt;&gt;`</returns>,4
all',4
'f',4
Of,4
`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</returns>,4
`HashSet&lt;Seq&lt;A&gt;&gt;`</returns>,4
<returns>`OptionUnsafe&lt;OptionAsync&lt;C&gt;&gt;`,4
smaller,4
\name="\self"\>Seq</param>\,4
3),4
\name="\self"\></param>\,4
environment.</param>,4
\`TryOption&lt;Lst&lt;A&gt;&gt;`,\,4
\name="\Success"\>Success\,4
\typo,\,4
succeeded</returns>,4
\Tuple(2,\,4
(not,4
user-state,4
<returns>`OptionAsync&lt;IEnumerable&lt;B&gt;&gt;`,4
*fields*,4
<remarks>You,4
`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
<returns>`OptionUnsafe&lt;TryAsync&lt;C&gt;&gt;`,4
<returns>(),4
simply,4
\`Set&lt;Seq&lt;A&gt;&gt;`,\,4
\`IReadOnlyDictionary<K,\,4
prettifying,4
data,4
removing,4
bool)`,4
`Arr&lt;Set&lt;A&gt;&gt;`</returns>,4
captures,4
indented,4
enclosed,4
We,4
<returns>Reader,4
\`Option&lt;HashSet&lt;A&gt;&gt;`,\,4
facilitate,4
m2);,4
someHandler,4
`Seq&lt;Seq&lt;A&gt;&gt;`</returns>,4
<returns>When,4
`IEnumerable&lt;TryOption&lt;A&gt;&gt;`</returns>,4
fails</returns>,4
retrieves,4
\`IEnumerable&lt;Lst&lt;A&gt;&gt;`,\,4
\`HashSet&lt;TryOption&lt;A&gt;&gt;`,\,4
provider,4
\`Try&lt;HashSet&lt;A&gt;&gt;`,\,4
\IfNone,\,4
\empty,\,4
\`Try&lt;Option&lt;A&gt;&gt;`,\,4
'try',4
mplus),4
\`Option&lt;Option&lt;A&gt;&gt;`,\,4
`Lst&lt;Try&lt;A&gt;&gt;`</returns>,4
\`Try&lt;Seq&lt;A&gt;&gt;`,\,4
stacks</returns>,4
LanguageExt.Trans;,4
`Option&lt;Set&lt;A&gt;&gt;`</returns>,4
\`Seq&lt;Lst&lt;A&gt;&gt;`,\,4
*all*,4
(flatmap),4
got,4
\`Arr&lt;Option&lt;A&gt;&gt;`,\,4
\name="\SELF"\>Self\,4
`IEnumerable&lt;Option&lt;A&gt;&gt;`</returns>,4
`Option&lt;Arr&lt;A&gt;&gt;`</returns>,4
\`TryOption&lt;Try&lt;A&gt;&gt;`,\,4
\name="\input"\>Input\,4
OptionAsync<B></returns>,4
\`Lst&lt;Lst&lt;A&gt;&gt;`,\,4
cancel,4
<returns>OptionT,4
letExpr,4
`HashSet&lt;HashSet&lt;A&gt;&gt;`</returns>,4
define,4
custom,4
\`HashSet&lt;Option&lt;A&gt;&gt;`,\,4
utopia,4
(-1),4
common,4
\`Arr&lt;IEnumerable&lt;A&gt;&gt;`,\,4
level,4
Try&lt;C&gt;&gt;`,4
\fold(xs,\,4
while,4
<returns>`Arr&lt;TryAsync&lt;C&gt;&gt;`,4
<returns>`Lst&lt;OptionAsync&lt;C&gt;&gt;`,4
`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\c),\,4
\`Option&lt;OptionUnsafe&lt;A&gt;&gt;`,\,4
\`HashSet&lt;Seq&lt;A&gt;&gt;`,\,4
\`Set&lt;Lst&lt;A&gt;&gt;`,\,4
\x.Add<Metres,\,4
!=,4
'for,4
`Lst&lt;IEnumerable&lt;A&gt;&gt;`</returns>,4
<returns>`IEnumerable&lt;Task&lt;C&gt;&gt;`,4
<returns>`HashSet&lt;TryOptionAsync&lt;C&gt;&gt;`,4
<returns>`Option&lt;Task&lt;C&gt;&gt;`,4
except,4
`Set&lt;Seq&lt;A&gt;&gt;`</returns>,4
\`TryOption&lt;Arr&lt;A&gt;&gt;`,\,4
`Seq&lt;Arr&lt;A&gt;&gt;`</returns>,4
`Try&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,4
\`Try&lt;Try&lt;A&gt;&gt;`,\,4
\Lst,\,4
`Seq&lt;TryOption&lt;A&gt;&gt;`</returns>,4
`OptionAsync&lt;Try&lt;A&gt;&gt;`</param>,3
`Seq&lt;Task&lt;A&gt;&gt;`</param>,3
`Try&lt;Task&lt;A&gt;&gt;`</param>,3
Mixing,3
`IEnumerable&lt;TryAsync&lt;A&gt;&gt;`</param>,3
NotSupportedException,3
`HashSet&lt;TryAsync&lt;A&gt;&gt;`</param>,3
\`TryOption&lt;OptionAsync&lt;A&gt;&gt;`,\,3
Exception</returns>,3
bool)>,3
`TryAsync&lt;Lst&lt;A&gt;&gt;`</param>,3
match</typeparam>,3
'match',3
none,3
`Task&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,3
post-subscription,3
\`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
push</param>,3
works,3
<returns>Top,3
algorithm,3
`Task&lt;Task&lt;A&gt;&gt;`</param>,3
Convenience,3
NullableT,3
\`Seq&lt;TryAsync&lt;A&gt;&gt;`,\,3
\`Lst&lt;Task&lt;A&gt;&gt;`,\,3
t1,3
\name="\root"\></param>\,3
`Task&lt;TryOption&lt;A&gt;&gt;`</param>,3
meaningless,3
<returns>!f</returns>,3
\`Lst&lt;OptionAsync&lt;A&gt;&gt;`,\,3
\name="\otherwiseMap"\>Default\,3
Some(a),3
`TryOptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,3
iterating,3
off,3
collection</param>,3
not),3
`Lst&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
API,3
Some:,3
`B`</returns>,3
\noneOf("\aeiou"\)\,3
`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
\`Lst&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
(select)</param>,3
ScriptExprs,3
\`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
ask<int>(),3
relationship,3
\`Option&lt;TryAsync&lt;A&gt;&gt;`,\,3
\(List(1,2,3),List())\,3
`OptionUnsafe&lt;Task&lt;A&gt;&gt;`</param>,3
reader,3
\apply(apply(SomeUnsafe(add),\,3
\name="\Term4"\>Fourth\,3
internals,3
default(L)</returns>,3
'in,3
`TryOptionAsync&lt;Arr&lt;A&gt;&gt;`</param>,3
10,3
\name="\list"\>Listto\,3
System.Double,3
care,3
NUM</param>,3
`HashSet&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
hashing,3
top-of-stack,3
\name="\otherwiseValue"\>Default\,3
\Tuple(1,\,3
\`OptionUnsafe&lt;Task&lt;A&gt;&gt;`,\,3
Because,3
`TryOptionAsync&lt;Seq&lt;A&gt;&gt;`</param>,3
Yard,3
\`TryOption&lt;Task&lt;A&gt;&gt;`,\,3
`Arr&lt;TryAsync&lt;A&gt;&gt;`</param>,3
(for,3
<returns>Stck.Empty,3
(returns,3
\`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`,\,3
encountered,3
<returns>Popped,3
character.</returns>,3
lexer,3
PRED</exception>,3
Patch,3
`Arr&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
`Task&lt;Set&lt;A&gt;&gt;`</param>,3
prefixed,3
\name="\otherwise"\>Default\,3
5));,3
\`Set&lt;Task&lt;A&gt;&gt;`,\,3
Truth,3
\(List(1,2),List(3,4,1,2,3,4))\,3
much,3
Starling,3
updating,3
\`TryAsync&lt;Task&lt;A&gt;&gt;`,\,3
ma.IsSome,3
fully,3
Foldable,3
<returns>Matching,3
strings,3
Arr,3
Just,3
invoke</returns>,3
B>(Option<A>,3
\`Lst&lt;TryAsync&lt;A&gt;&gt;`,\,3
position,3
`a,3
publish,3
readonly,3
`Seq&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
four,3
default(MONADB).Fail();,3
quite,3
`Option&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
\`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,\,3
message'),3
Idiot,3
\name="\EqA"\>Eq\,3
\`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`,\,3
\`Arr&lt;Task&lt;A&gt;&gt;`,\,3
`Option&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
match</returns>,3
\`HashSet&lt;OptionAsync&lt;A&gt;&gt;`,\,3
components,3
style:,3
`Try&lt;TryAsync&lt;A&gt;&gt;`</param>,3
explicitly,3
`TryAsync&lt;IEnumerable&lt;A&gt;&gt;`</param>,3
\`TryOptionAsync&lt;Task&lt;A&gt;&gt;`,\,3
infamous,3
https://en.wikipedia.org/wiki/Monad_(functional_programming),3
\`IEnumerable&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
\name="\v"\>Task\,3
\`HashSet&lt;TryAsync&lt;A&gt;&gt;`,\,3
Discriminated,3
combination,3
read,3
`OptionAsync&lt;Arr&lt;A&gt;&gt;`</param>,3
primarily,3
\name="\FunctorAB"\>Functor\,3
Event,3
`OptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,3
occurred,3
`OptionAsync&lt;Set&lt;A&gt;&gt;`</param>,3
`Task&lt;Try&lt;A&gt;&gt;`</param>,3
been,3
\`OptionUnsafe&lt;OptionAsync&lt;A&gt;&gt;`,\,3
Hash,3
`Lst&lt;TryAsync&lt;A&gt;&gt;`</param>,3
distinct,3
fails),3
Safely,3
\('a',\,3
\name="\map"\>Function\,3
\`Seq&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
item),3
\`Arr&lt;OptionAsync&lt;A&gt;&gt;`,\,3
`OptionAsync&lt;Task&lt;A&gt;&gt;`</param>,3
\(`Option`,\,3
adding,3
`Task&lt;HashSet&lt;A&gt;&gt;`</param>,3
\-1,\,3
\`OptionAsync&lt;Task&lt;A&gt;&gt;`,\,3
\`Try&lt;Task&lt;A&gt;&gt;`,\,3
Feet,3
\`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
});,3
`TryOptionAsync&lt;Option&lt;A&gt;&gt;`</param>,3
reverse,3
\`Seq&lt;Task&lt;A&gt;&gt;`,\,3
`TryAsync&lt;TryOption&lt;A&gt;&gt;`</param>,3
\`TryOption&lt;TryAsync&lt;A&gt;&gt;`,\,3
\name="\TR"\>Right</typeparam>\,3
<returns>Stack,3
\Y-combinator,\,3
7*ft;,3
`IEnumerable&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
strip,3
'take',3
`TryOption&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
`Try&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
Map(,3
problems,3
why,3
hands,3
states:,3
4,3
\`Option&lt;OptionAsync&lt;A&gt;&gt;`,\,3
3);,3
\name="\T"\>Value\,3
Option</returns>,3
\name="\A"\>Key\,3
use:,3
`TryOptionAsync&lt;HashSet&lt;A&gt;&gt;`</param>,3
Bank,3
\faulted),\,3
`OptionAsync&lt;HashSet&lt;A&gt;&gt;`</param>,3
\`OptionUnsafe&lt;TryAsync&lt;A&gt;&gt;`,\,3
`OptionAsync&lt;Option&lt;A&gt;&gt;`</param>,3
OptionV<A>,3
\cref="\ArgumentOutOfRangeException"\>If\,3
'makeTokenParser',3
`Task&lt;Seq&lt;A&gt;&gt;`</param>,3
Falsity,3
false.</returns>,3
\`Option&lt;Task&lt;A&gt;&gt;`,\,3
\name="\None"\>Default\,3
i,3
\`HashSet&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
fastest,3
property,3
0;,3
\`Set&lt;TryAsync&lt;A&gt;&gt;`,\,3
f(a));,3
`IEnumerable&lt;Task&lt;A&gt;&gt;`</param>,3
\`TryOption&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
safely,3
enumeration,3
(Map,3
HasValue,3
InitTest,3
`HashSet&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
message',3
\name="\MONADB"\>Type-class\,3
`Seq&lt;TryAsync&lt;A&gt;&gt;`</param>,3
f(ma.Value),3
`Try&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
performance,3
namely,3
`false`,3
`TryOptionAsync&lt;TryOption&lt;A&gt;&gt;`</param>,3
\`Try&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
I,3
<returns>Asynchronous,3
\name="\left"\></param>\,3
`TryOptionAsync&lt;Lst&lt;A&gt;&gt;`</param>,3
\Cond,\,3
\TryAsync<int>,\,3
parse,3
V),3
\name="\type"\></param>\,3
conflicting,3
message</param>,3
\'oneOf',\,3
\`Set&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
`Task&lt;IEnumerable&lt;A&gt;&gt;`</param>,3
\well,\,3
Remarks,3
`Arr&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
Optional<A>,3
`TryOption&lt;TryAsync&lt;A&gt;&gt;`</param>,3
request/response,3
`TryAsync&lt;Seq&lt;A&gt;&gt;`</param>,3
'LanguageDef',3
example</typeparam>,3
`Lst&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
\name="\TException"\></typeparam>\,3
\`OptionUnsafe&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
`Seq&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
`FAIL`,3
ConcurrentDictionary,3
\`IEnumerable&lt;OptionAsync&lt;A&gt;&gt;`,\,3
`Task&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
HashMap,3
\`Task&lt;Task&lt;A&gt;&gt;`,\,3
`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
'Otherwise()',3
`TryAsync&lt;Arr&lt;A&gt;&gt;`</param>,3
\`Task&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
Describes,3
\Count,\,3
\name="\ADD"\>Add\,3
Mockingbird,3
\`Try&lt;OptionAsync&lt;A&gt;&gt;`,\,3
2);,3
leak,3
\'b',\,3
nesting,3
`TryAsync&lt;TryAsync&lt;A&gt;&gt;`</param>,3
IObservable,3
\`HashSet&lt;Task&lt;A&gt;&gt;`,\,3
\`Option&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
metres,3
`TryOptionAsync&lt;Try&lt;A&gt;&gt;`</param>,3
Millisecond,3
T),3
`Task&lt;TryAsync&lt;A&gt;&gt;`</param>,3
ToString,3
`OptionAsync&lt;TryOption&lt;A&gt;&gt;`</param>,3
\name="\C"\>Third\,3
'wrong',3
CondAsync.Else(),3
correctly,3
within,3
`OptionUnsafe&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
\name="\A"\>Item\,3
top</returns>,3
\`Arr&lt;TryAsync&lt;A&gt;&gt;`,\,3
4);,3
`Set&lt;Task&lt;A&gt;&gt;`</param>,3
Sage,3
most,3
<returns>Tuple,3
<returns>Head,3
\`IEnumerable&lt;Task&lt;A&gt;&gt;`,\,3
OptionAsyncal</param>,3
complex,3
`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
Thrush,3
safe,3
B</typeparam>,3
Numbers,3
'listen',3
`TryOption&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
`TryAsync&lt;HashSet&lt;A&gt;&gt;`</param>,3
modified,3
`Task&lt;Arr&lt;A&gt;&gt;`</param>,3
Unlike,3
<returns>Throws,3
`TryAsync&lt;Task&lt;A&gt;&gt;`</param>,3
7*yd;,3
\lhs,\,3
d)`,3
int</param>,3
`TryOption&lt;Task&lt;A&gt;&gt;`</param>,3
\`Try&lt;TryAsync&lt;A&gt;&gt;`,\,3
computed,3
popped</returns>,3
oneOf(str),3
e,3
`Lst&lt;Task&lt;A&gt;&gt;`</param>,3
<returns>Try,3
Clock,3
Version,3
tree</returns>,3
\`true`,\,3
`Task&lt;Option&lt;A&gt;&gt;`</param>,3
avoid,3
\this,\,3
SomeUnsafe(add),3
/zero/,3
`OptionUnsafe&lt;TryAsync&lt;A&gt;&gt;`</param>,3
`IEnumerable&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
(skips,3
\True,\,3
<returns>`true`,3
default(MONADB).Fail(),3
card,3
\name="\self"\>Option\,3
append:,3
quotient,3
\filtered,\,3
`TryOptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</param>,3
ternary,3
Constant,3
symbol,3
divisor,3
\name="\either"\></param>\,3
\Unit,\,3
\EitherUnsafe,\,3
8-bit,3
`TryAsync&lt;Set&lt;A&gt;&gt;`</param>,3
`Arr&lt;Task&lt;A&gt;&gt;`</param>,3
Holds,3
`TryAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</param>,3
<returns>if,3
\Skip,\,3
<returns>sequence</returns>,3
<returns>Untouched,3
f(disposable)</returns>,3
\`Task&lt;OptionAsync&lt;A&gt;&gt;`,\,3
sub-ranges,3
`TryAsync&lt;Try&lt;A&gt;&gt;`</param>,3
\`Seq&lt;OptionAsync&lt;A&gt;&gt;`,\,3
\MTryAsync<int>,\,3
dual,3
\b`,\,3
\"\E"\)\,3
\So,\,3
`Option&lt;TryAsync&lt;A&gt;&gt;`</param>,3
accepts,3
\`Arr&lt;TryOptionAsync&lt;A&gt;&gt;`,\,3
sums,3
consonant,3
`TryOptionAsync&lt;Set&lt;A&gt;&gt;`</param>,3
`HashSet&lt;Task&lt;A&gt;&gt;`</param>,3
Contains,3
Chooses,3
\instead,\,3
noneOf(str),3
\`Set&lt;OptionAsync&lt;A&gt;&gt;`,\,3
Queer,3
\`Task&lt;TryAsync&lt;A&gt;&gt;`,\,3
small,3
`d`,3
popped,3
\error',\,3
tuples</returns>,3
\name="\step"\>The\,3
queryable,3
`OptionAsync&lt;Seq&lt;A&gt;&gt;`</param>,3
our,3
\name="\to"\>The\,3
Empty),3
`Set&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
\`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`,\,3
\(List(),List(1,2,3))\,3
value-type,3
`OptionUnsafe&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
section,3
None:,3
Safe,3
money,3
BiFoldable,3
\name="\project"\>Final\,3
`OptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</param>,3
`TryOptionAsync&lt;Task&lt;A&gt;&gt;`</param>,3
`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
`Set&lt;OptionAsync&lt;A&gt;&gt;`</param>,3
\compositions,\,3
pop,3
content,3
Matches,3
TryAsync<A>,3
`Task&lt;Lst&lt;A&gt;&gt;`</param>,3
word,3
`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`</param>,3
\name="\MB"\>Type\,3
list.Count,3
main,3
increment,3
\`IEnumerable&lt;TryAsync&lt;A&gt;&gt;`,\,3
<returns>Conditional,3
`Seq`,3
\`applicable(p,\,3
`Set&lt;TryAsync&lt;A&gt;&gt;`</param>,3
<returns>Type,3
`OptionAsync&lt;Lst&lt;A&gt;&gt;`</param>,3
full,3
`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`</param>,3
`Task&lt;TryOptionAsync&lt;A&gt;&gt;`</param>,3
considered,3
\`TryAsync&lt;TryAsync&lt;A&gt;&gt;`,\,3
\`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`,\,3
`TryAsync&lt;Option&lt;A&gt;&gt;`</param>,3
Kestrel,3
`Option&lt;Task&lt;A&gt;&gt;`</param>,3
Below,3
Ord,3
month,3
range</returns>,2
Whenever,2
implements,2
\`Lst`,\,2
<returns>`Try&lt;Option&lt;B&gt;&gt;`</returns>,2
concrete,2
\compare<OrdDefault<A>,\,2
\name="\f"\></param>\,2
<returns>`Task&lt;Try&lt;B&gt;&gt;`</returns>,2
exception</returns>,2
\name="\NUM"\>Product\,2
raw,2
`HashSet&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
`Try&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
OrdDefault,2
`HashSet&lt;Task&lt;A&gt;&gt;`</returns>,2
field,2
`Insert`,2
\(ordinal,\,2
B>(CH,2
there's,2
<returns>`IEnumerable&lt;Option&lt;B&gt;&gt;`</returns>,2
`HashSet&lt;HashSet&lt;B&gt;&gt;`,2
close,2
memoization,2
entries),2
`TryOptionAsync&lt;TryOption&lt;B&gt;&gt;`,2
\Seq,\,2
'product',2
`Arr&lt;Seq&lt;B&gt;&gt;`,2
Assoc,2
7*mile;,2
constructed</typeparam>,2
<returns>`HashSet&lt;TryOption&lt;B&gt;&gt;`</returns>,2
nodes,2
\comments,\,2
\TryAsync,\,2
<returns>`Arr&lt;Arr&lt;A&gt;&gt;`</returns>,2
\name="\FailMap"\>Function\,2
`take`,2
(1),2
Conversion,2
isnull(value)</returns>,2
'Option',2
p),2
<returns>`HashSet&lt;Set&lt;A&gt;&gt;`</returns>,2
6,2
None(Action),2
`TryOptionAsync&lt;Option&lt;A&gt;&gt;`</returns>,2
conflict,2
<returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
\choicei(ps,\,2
setState,2
Right:,2
\"\Hello\,2
tested,2
<returns>`HashSet&lt;Arr&lt;B&gt;&gt;`</returns>,2
Pass,2
'natural',2
TryOptionAsync<A>,2
`Right`,2
\name="\asyncMap"\>Inner\,2
Record,2
<returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;`</returns>,2
\convenience,\,2
<returns>`Seq&lt;Seq&lt;A&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;`</returns>,2
Lst/Stck/Que,2
<returns>`Try&lt;Seq&lt;B&gt;&gt;`</returns>,2
MonadA,2
Right(x),2
`TryAsync&lt;HashSet&lt;B&gt;&gt;`,2
default(MONADB).Id(_,2
many1(p),2
`Arr&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
recursion,2
<returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
1)),2
\case,\,2
<returns>`TryOption&lt;Try&lt;B&gt;&gt;`</returns>,2
`Option&lt;Option&lt;B&gt;&gt;`,2
\other),\,2
OperatorTable,2
\attempt(str("\let"\))\,2
<returns>`Task&lt;Task&lt;B&gt;&gt;`</returns>,2
`TryAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
\name="\a"\>Option\,2
`OptionUnsafe`,2
Parser<int>,2
yield,2
`TryAsync&lt;Lst&lt;B&gt;&gt;`,2
<returns>`Try&lt;Seq&lt;A&gt;&gt;`</returns>,2
<returns>`TryOptionAsync&lt;OptionAsync&lt;B&gt;&gt;`</returns>,2
<returns>`Arr&lt;TryOption&lt;B&gt;&gt;`</returns>,2
They're,2
`ma()`,2
<returns>`TryOptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`</returns>,2
lhs.Append(rhs);,2
(starting,2
eliminate,2
\name="\delayUntil"\>DateTime\,2
ID,2
associated,2
`OptionAsync&lt;Set&lt;B&gt;&gt;`,2
`Seq&lt;IEnumerable&lt;B&gt;&gt;`,2
mbStart,2
dispatching,2
\name="\FABC"\>Type\,2
Visitor,2
SuccessMap,2
Different,2
nerr,2
well,2
<returns>`Option&lt;Set&lt;B&gt;&gt;`</returns>,2
\'c',\,2
`HashSet&lt;Arr&lt;B&gt;&gt;`,2
<returns>`Arr&lt;Set&lt;B&gt;&gt;`</returns>,2
\output2),\,2
`Seq&lt;HashSet&lt;B&gt;&gt;`,2
mult),2
\postfix("\++"\,\,2
Tries,2
],2
taskOpt,2
`OptionAsync&lt;TryAsync&lt;B&gt;&gt;`,2
<returns>`Option&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`Option&lt;Set&lt;A&gt;&gt;`</returns>,2
number),2
\Seq.span(Seq(1,2,3),\,2
rely,2
\SomeUnsafe(3)),\,2
\default(CHOICE).MatchUnsafe(mma,\,2
`TryOptionAsync&lt;Task&lt;B&gt;&gt;`,2
`OptionAsync&lt;Set&lt;A&gt;&gt;`</returns>,2
`IEnumerable&lt;Option&lt;B&gt;&gt;`,2
\apply(diff(d,\,2
lazily,2
`Arr&lt;Task&lt;A&gt;&gt;`</returns>,2
bindable,2
`OptionAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,2
\fails,\,2
`Task&lt;Arr&lt;A&gt;&gt;`</returns>,2
`Option&lt;Task&lt;A&gt;&gt;`</returns>,2
`Reader`,2
\"\le"\\,2
constrained,2
keywordLet,2
(this)</returns>,2
EqOpt,2
minimises,2
<returns>`HashSet&lt;HashSet&lt;B&gt;&gt;`</returns>,2
\culture,\,2
\output2,\,2
Some(value),2
<returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
`Lst&lt;Try&lt;B&gt;&gt;`,2
Some(Func),2
Implements,2
10);,2
result([]),2
`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;`,2
<returns>`Set&lt;Option&lt;B&gt;&gt;`</returns>,2
<returns>`Lst&lt;HashSet&lt;A&gt;&gt;`</returns>,2
<returns>`OptionAsync&lt;TryOption&lt;B&gt;&gt;`</returns>,2
OnFinalise,2
throwing,2
`OptionAsync&lt;Try&lt;B&gt;&gt;`,2
\name="\Term5"\>Fifth\,2
future,2
<returns>`Lst&lt;TryOption&lt;B&gt;&gt;`</returns>,2
propagates,2
<returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>IEnumerator</returns>,2
b;,2
\chain,\,2
ParserResult,2
\"\x"\,\,2
getting,2
determine,2
`Set&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
\name="\self"\>Dictionary</param>\,2
programming,2
\total,\,2
<returns>`TryOption&lt;Try&lt;A&gt;&gt;`</returns>,2
added.</typeparam>,2
`Option&lt;Set&lt;B&gt;&gt;`,2
whereas,2
generation,2
\(default(A),\,2
missing,2
<returns>`Option&lt;Try&lt;A&gt;&gt;`</returns>,2
gets,2
<returns>`Arr&lt;Lst&lt;B&gt;&gt;`</returns>,2
\diff(b,\,2
Task<TryOption<A>>,2
<returns>`Try&lt;Arr&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;Arr&lt;B&gt;&gt;`,2
<returns>`Try&lt;HashSet&lt;B&gt;&gt;`</returns>,2
\optionOrElse(x,\,2
`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
\name="\FBC"\>Type\,2
<returns>`TryAsync&lt;Try&lt;B&gt;&gt;`</returns>,2
<returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
concatenated</returns>,2
`HashSet&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
`OptionUnsafe&lt;Try&lt;B&gt;&gt;`,2
<returns>`Task&lt;TryAsync&lt;B&gt;&gt;`</returns>,2
<returns>`OptionAsync&lt;HashSet&lt;B&gt;&gt;`</returns>,2
\name="\value"\>Option</param>\,2
<returns>`Arr&lt;Arr&lt;B&gt;&gt;`</returns>,2
Booleans,2
`Try&lt;HashSet&lt;B&gt;&gt;`,2
`Arr&lt;Option&lt;B&gt;&gt;`,2
<returns>`Arr&lt;HashSet&lt;B&gt;&gt;`</returns>,2
`Try&lt;IEnumerable&lt;B&gt;&gt;`,2
consists,2
`Option&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
q)`,2
ordered,2
Inch,2
\line-lengths,\,2
\suboptimal,\,2
span,2
\chainr(p,op,x)\,2
fit,2
<returns>`Try&lt;Lst&lt;A&gt;&gt;`</returns>,2
<returns>`TryAsync&lt;HashSet&lt;B&gt;&gt;`</returns>,2
mres,2
<returns>`Option&lt;Try&lt;B&gt;&gt;`</returns>,2
values.</typeparam>,2
match',2
`TryOptionAsync&lt;Arr&lt;A&gt;&gt;`</returns>,2
`W`,2
`Seq&lt;Try&lt;B&gt;&gt;`,2
exponent:,2
<returns>`Set&lt;Arr&lt;A&gt;&gt;`</returns>,2
Which,2
Base,2
`TryOptionAsync&lt;Try&lt;A&gt;&gt;`</returns>,2
Compose,2
structs,2
<returns>`Arr&lt;Seq&lt;B&gt;&gt;`</returns>,2
`IEnumerable&lt;Task&lt;A&gt;&gt;`</returns>,2
unification,2
`Seq&lt;OptionUnsafe&lt;B&gt;&gt;`,2
`A`,2
mechanism,2
\name="\A"\>Wrapped\,2
Nothing,2
<returns>OptionAsync<T>,2
j,2
<returns>`Try&lt;TryOption&lt;A&gt;&gt;`</returns>,2
mb;,2
normally,2
`Task&lt;Option&lt;A&gt;&gt;`</returns>,2
`Output`,2
appropriately,2
<returns>`Lst&lt;Option&lt;A&gt;&gt;`</returns>,2
negate,2
`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
`Try&lt;OptionUnsafe&lt;B&gt;&gt;`,2
Degrees,2
enumerated,2
stating,2
`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
`Set&lt;Lst&lt;B&gt;&gt;`,2
output</typeparam>,2
\expressions,\,2
(`None`,2
\Subtractable,\,2
memoize</param>,2
`R`,2
\Set,\,2
Although,2
`Arr&lt;Set&lt;B&gt;&gt;`,2
<returns>`Set&lt;HashSet&lt;A&gt;&gt;`</returns>,2
<returns>`Lst&lt;Option&lt;B&gt;&gt;`</returns>,2
`bool`,2
\Indeed,\,2
saves,2
<returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</returns>,2
<returns>`OptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`</returns>,2
<returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
#64,2
`0`,2
`Option&lt;IEnumerable&lt;B&gt;&gt;`,2
USE,2
<returns>`Try&lt;Try&lt;A&gt;&gt;`</returns>,2
`Option&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
`SUCCESS`,2
<returns>`Set&lt;TryOption&lt;A&gt;&gt;`</returns>,2
\A>(this,\,2
`TryOptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,2
attempt(p),2
<--,2
`TryOptionAsync&lt;Try&lt;B&gt;&gt;`,2
subtrahend),2
PString,2
`TryAsync&lt;Set&lt;A&gt;&gt;`</returns>,2
`Try&lt;Option&lt;B&gt;&gt;`,2
year,2
\ArgumentNullException("\info"\);\,2
alternatives,2
\object,\,2
`IEnumerable&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
Do(CH,2
`Option&lt;TryOption&lt;B&gt;&gt;`,2
\EitherUnsafeAsync<A,\,2
\name="\PRED"\>A\,2
\table,\,2
\t2,\,2
keywords,2
\name="\FAIL"\></typeparam>\,2
\Monad<Env,\,2
worst,2
Floating<A>,2
`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
`fromList`,2
`TryAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,2
ability,2
stored.</typeparam>,2
\parameter,\,2
'comma',2
input.This,2
<returns>`Arr&lt;Set&lt;A&gt;&gt;`</returns>,2
Hours(double,2
<returns>`OptionAsync&lt;TryAsync&lt;B&gt;&gt;`</returns>,2
`OptionAsync&lt;TryOption&lt;B&gt;&gt;`,2
\Assert.Equal(first,\,2
writes,2
\`append(p1,\,2
Nullable<T>,2
TryOptionAsync&lt;B&gt;&gt;`</returns>,2
<returns>`Try&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
smarter,2
\name="\value"\>OptionUnsafe</param>\,2
consumes,2
\binary("\-"\,\,2
<returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;`</returns>,2
<returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
\expression"\)\,2
`OptionAsync&lt;Lst&lt;B&gt;&gt;`,2
\patch,\,2
with:,2
`OptionAsync&lt;Option&lt;B&gt;&gt;`,2
`Try&lt;Task&lt;A&gt;&gt;`</returns>,2
'Monoid',2
Essentially,2
<returns>`Seq&lt;Arr&lt;A&gt;&gt;`</returns>,2
column,2
`Arr&lt;Arr&lt;B&gt;&gt;`,2
expecting,2
\!equals<EQ,\,2
`Try&lt;Try&lt;B&gt;&gt;`,2
<returns>`Task&lt;Arr&lt;B&gt;&gt;`</returns>,2
\binary("\+"\,\,2
`TryOption&lt;Option&lt;B&gt;&gt;`,2
ignores,2
\name="\value"\>Wrapped\,2
zerp,2
behaves,2
\chaini(ps,\,2
\OptionAsyncal,\,2
<returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
lhs.Product(rhs);,2
<returns>`Lst&lt;Set&lt;A&gt;&gt;`</returns>,2
Serialise,2
<returns>`HashSet&lt;Try&lt;B&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;Try&lt;B&gt;&gt;`</returns>,2
\`q`,\,2
`HashSet&lt;TryOption&lt;B&gt;&gt;`,2
(base,2
\name="\Fail"\>Predicate</param>\,2
<returns>`HashSet&lt;Seq&lt;B&gt;&gt;`</returns>,2
`TryOption&lt;Arr&lt;B&gt;&gt;`,2
\B>(Writer<MonoidW,\,2
\State,\,2
\name="\SuccessValue"\>Value\,2
Delete,2
\name="\fc"\>Projection\,2
`Task&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`TryOptionAsync&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
`Seq&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
\documents,\,2
l,2
Millimeter,2
\equivalent,\,2
<returns>`Set&lt;Set&lt;B&gt;&gt;`</returns>,2
\buildExpressionParser(table,term)\,2
OptionUnsafe<A>,2
`OptionUnsafe&lt;Set&lt;B&gt;&gt;`,2
<returns>`TryOptionAsync&lt;TryAsync&lt;B&gt;&gt;`</returns>,2
DO,2
return:,2
non-parametric,2
example),2
R>,2
It's,2
\binary("\*"\,\,2
6);,2
\TryOptionAsync,\,2
\name="\e"\></param>\,2
MA</returns>,2
<returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;`</returns>,2
<returns>Subtracted,2
\Equals<EQ,\,2
<returns>`TryOptionAsync&lt;Set&lt;B&gt;&gt;`</returns>,2
handles,2
<returns>`Seq&lt;Set&lt;B&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;`</returns>,2
\d)),\,2
https://github.com/louthy/language-ext/issues/64,2
\RunAsync(Func<Unit,\,2
O(mn),2
greatest,2
`IEnumerable&lt;HashSet&lt;B&gt;&gt;`,2
breakpoints,2
shift,2
\ordering,\,2
<returns>`OptionAsync&lt;Option&lt;B&gt;&gt;`</returns>,2
\name="\a"\>Value\,2
<returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</returns>,2
`TryOptionAsync&lt;Lst&lt;B&gt;&gt;`,2
checks,2
<returns>`TryOptionAsync&lt;Option&lt;B&gt;&gt;`</returns>,2
validate,2
`Lst&lt;Option&lt;B&gt;&gt;`,2
`Option&lt;Arr&lt;B&gt;&gt;`,2
escape,2
\name="\value"\>Try\,2
'longest,2
`TryOption&lt;Task&lt;A&gt;&gt;`</returns>,2
bool,2
\name="\RRet"\>Success\,2
x.Cons(y);,2
\name="\S"\>Type\,2
concatenate</param>,2
c.Cons(cs),2
<returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
that's,2
easier,2
Bottom</exception>,2
come,2
transformers,2
own,2
\EitherAsync,\,2
NUM,2
definitions,2
clocks,2
\"\t"\\,2
implemented,2
never,2
`Set&lt;Task&lt;A&gt;&gt;`</returns>,2
compatible,2
'-',2
\int>(x,\,2
`1`,2
ver2,2
associate,2
\typeclass,\,2
\name="\Out"\>The\,2
testing,2
<returns>`Arr&lt;TryOption&lt;A&gt;&gt;`</returns>,2
O(n,2
v,2
\sepBy(p,sep)\,2
hack,2
e),2
Assert.True(res.LiftT(),2
`TryOptionAsync&lt;IEnumerable&lt;B&gt;&gt;`,2
involved,2
\name="\LeftAsync"\>Predicate</param>\,2
`Arr&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
freeing,2
lhs.Plus(rhs);,2
Given,2
<returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;`</returns>,2
`IEnumerable&lt;Arr&lt;B&gt;&gt;`,2
2;,2
<returns>`Option&lt;Option&lt;B&gt;&gt;`</returns>,2
Operator.Postfix<int>(from,2
<returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;Try&lt;A&gt;&gt;`</returns>,2
`Arr&lt;OptionUnsafe&lt;B&gt;&gt;`,2
TryAsync&lt;B&gt;&gt;`</returns>,2
<returns>`TryAsync&lt;TryAsync&lt;B&gt;&gt;`</returns>,2
X,2
\MA,\,2
Don't,2
7*inch;,2
deriving,2
<returns>`Arr&lt;Try&lt;A&gt;&gt;`</returns>,2
\10,000\,2
parsed.</returns>,2
`TryOption&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
identifier(for,2
<returns>`TryAsync&lt;OptionAsync&lt;B&gt;&gt;`</returns>,2
newline,2
meerr,2
FailValue,2
`L`,2
<returns>`Lst&lt;Arr&lt;B&gt;&gt;`</returns>,2
OrdOpt,2
\Some(List(1,\,2
Monads,2
<returns>`OptionAsync&lt;Lst&lt;B&gt;&gt;`</returns>,2
Maybe,2
synchronously,2
`State`),2
carriage-return,2
`TryOptionAsync&lt;Seq&lt;B&gt;&gt;`,2
`TryAsync&lt;TryAsync&lt;B&gt;&gt;`,2
`OptionAsync&lt;OptionAsync&lt;B&gt;&gt;`,2
\apply(inverse(diff(e,\,2
`TryOption&lt;Set&lt;B&gt;&gt;`,2
`Arr&lt;Lst&lt;B&gt;&gt;`,2
`IEnumerable&lt;Set&lt;B&gt;&gt;`,2
tr.Match&lt;string&gt;(),2
<returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
Some</param>,2
<returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`Arr&lt;Option&lt;B&gt;&gt;`</returns>,2
'notFollowedBy',2
\name="\NUM"\>Add\,2
Patch.empty,2
recognizing,2
strong,2
<returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;`</returns>,2
Task&lt;B&gt;&gt;`</returns>,2
Option:,2
anyChar,2
loaded,2
<returns>`Arr&lt;Seq&lt;A&gt;&gt;`</returns>,2
Message,2
`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
Memo,2
succeeded,2
<returns>`Task&lt;HashSet&lt;B&gt;&gt;`</returns>,2
\name="\expected"\>What\,2
<returns>`Seq&lt;Option&lt;B&gt;&gt;`</returns>,2
\operation,\,2
Success(),2
`TryOptionAsync&lt;Seq&lt;A&gt;&gt;`</returns>,2
b),2
OptionAsyncs,2
monad;,2
`Seq&lt;Task&lt;A&gt;&gt;`</returns>,2
mma),2
\applicable(diff(a,\,2
second);,2
anonymous,2
<returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;`</returns>,2
'Data.Foldable.Foldable',2
negate),2
<returns>HSet</returns>,2
\Lst<int>>(List(1,\,2
successor,2
`TryOptionAsync&lt;Set&lt;A&gt;&gt;`</returns>,2
`Lst&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
composed,2
<returns>`TryAsync&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
(Lst,2
Kilometer,2
right-associative,2
Negates,2
`Lst&lt;Lst&lt;B&gt;&gt;`,2
`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;`,2
pred,2
simpler,2
shameless,2
<returns>`Arr&lt;Try&lt;B&gt;&gt;`</returns>,2
resolve,2
<returns>`Task&lt;OptionAsync&lt;B&gt;&gt;`</returns>,2
\either(p,q)\,2
<returns>`OptionAsync&lt;Try&lt;B&gt;&gt;`</returns>,2
`Set&lt;Try&lt;B&gt;&gt;`,2
`TryAsync&lt;Option&lt;A&gt;&gt;`</returns>,2
\prefix("\-"\,negate),\,2
`TryAsync&lt;Seq&lt;A&gt;&gt;`</returns>,2
probably,2
None(Func),2
<returns>`OptionAsync&lt;Task&lt;B&gt;&gt;`</returns>,2
\EitherAsync<A,\,2
`Set&lt;Set&lt;B&gt;&gt;`,2
whichever,2
\ratio,\,2
aggregation,2
holding,2
showable,2
\Func<int,int,int>\,2
(i.e.,2
System.Byte,2
creates,2
maintains,2
\Assert.True(res2.LiftT("\World"\).IsNone);\,2
\List.span(List(1,2,3,4,1,2,3,4),\,2
time-span,2
distinguish,2
<returns>`TryOption&lt;Arr&lt;B&gt;&gt;`</returns>,2
response,2
<returns>`HashSet&lt;HashSet&lt;A&gt;&gt;`</returns>,2
\name="\SUCCESS"\></typeparam>\,2
<returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;`</returns>,2
-3),2
<returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
(start),2
\default(MONADB).BindReturn((output1,\,2
double-dispatch,2
<returns>`TryAsync&lt;TryOption&lt;B&gt;&gt;`</returns>,2
\name="\taskA"\>Task\,2
\name="\TR"\>Success</typeparam>\,2
`TryAsync&lt;Task&lt;A&gt;&gt;`</returns>,2
collects,2
`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;`,2
<returns>`Lst&lt;Seq&lt;A&gt;&gt;`</returns>,2
TryGetValue,2
\OptionUnsafe,\,2
<returns>`Lst&lt;Set&lt;B&gt;&gt;`</returns>,2
\name="\outputma"\>Output\,2
'sum',2
<returns>Set</returns>,2
Task<Try<A>>,2
Daylight,2
SelectMany,2
<returns>`Seq&lt;Try&lt;B&gt;&gt;`</returns>,2
ranges,2
<returns>`TryOption&lt;Seq&lt;A&gt;&gt;`</returns>,2
`IEnumerable&lt;Seq&lt;B&gt;&gt;`,2
\actions,\,2
<returns>`TryOption&lt;Option&lt;A&gt;&gt;`</returns>,2
Options,2
\append<TInteger,\,2
easy,2
\A>(a,\,2
Operator.Infix<int>(,2
<remarks>Differs,2
`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
`Arr&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
\Try,\,2
'whiteSpace',2
tryfun((),2
<returns>`Lst&lt;Try&lt;A&gt;&gt;`</returns>,2
`Task&lt;Arr&lt;B&gt;&gt;`,2
job,2
`Try&lt;Arr&lt;B&gt;&gt;`,2
<returns>`OptionAsync&lt;Arr&lt;B&gt;&gt;`</returns>,2
`TryAsync&lt;Try&lt;A&gt;&gt;`</returns>,2
needs!),2
1048576L;,2
`OptionUnsafe&lt;Task&lt;A&gt;&gt;`</returns>,2
`O(k,2
false);,2
diverging,2
bytes,2
Unexpect,2
Left:,2
occurs,2
internally,2
closely),2
(ordinal),2
\name="\value"\>Items\,2
`MA`</returns>,2
<returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
<returns>`TryAsync&lt;TryOptionAsync&lt;B&gt;&gt;`</returns>,2
`OptionAsync&lt;Task&lt;A&gt;&gt;`</returns>,2
<returns>`HashSet&lt;TryOption&lt;A&gt;&gt;`</returns>,2
re-wrap</param>,2
QueT,2
ASCII,2
<returns>`Arr&lt;HashSet&lt;A&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;`</returns>,2
\name="\EqA"\></typeparam>\,2
`Lst&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
braces,2
across,2
`Try&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
versions,2
[Pure],2
<returns>`Lst&lt;HashSet&lt;B&gt;&gt;`</returns>,2
\sepEndBy1(p,sep)\,2
\name="\FailValue"\>Value\,2
\chainl(p,op,x)\,2
\Assert.Equal(SomeUnsafe(7),\,2
/predictive/,2
write:,2
Restore,2
\default(MonoidW).Empty(),\,2
'attempt',2
\name="\T"\>Target\,2
`EitherUnsafe`,2
`Try&lt;Lst&lt;B&gt;&gt;`,2
\output1,\,2
\binary("\/"\,\,2
zeroleft,2
due,2
cost,2
Error,2
_>,2
(zero),2
<returns>`Set&lt;Lst&lt;A&gt;&gt;`</returns>,2
`Patch.applicable`),2
\name="\A"\>\,2
\),\,2
`T`,2
`Monoid`,2
lack,2
turn,2
Replaces,2
<returns>`TryOptionAsync&lt;Try&lt;B&gt;&gt;`</returns>,2
<returns>`Option&lt;HashSet&lt;B&gt;&gt;`</returns>,2
<returns>`TryOptionAsync&lt;Lst&lt;B&gt;&gt;`</returns>,2
OptionT,2
\2"\);\,2
\name="\FC"\>Type\,2
<returns>`Task&lt;TryOptionAsync&lt;B&gt;&gt;`</returns>,2
scenarios,2
defines,2
chars,2
`Task&lt;Lst&lt;A&gt;&gt;`</returns>,2
Patches,2
-2,2
optionalArray(p),2
Writer's,2
<returns>`TryAsync&lt;Set&lt;B&gt;&gt;`</returns>,2
`Option&lt;Try&lt;B&gt;&gt;`,2
`Task&lt;Task&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;Try&lt;B&gt;&gt;`,2
\name="\clauses"\>Clauses\,2
<returns>`Seq&lt;HashSet&lt;B&gt;&gt;`</returns>,2
`Task&lt;TryOption&lt;B&gt;&gt;`,2
performed,2
\name="\fc"\>Third\,2
Assert.True(false),2
\name="\Success"\>Function\,2
integers,2
`Task&lt;OptionUnsafe&lt;B&gt;&gt;`,2
/without,2
consumer,2
<returns>`TryOption&lt;TryOption&lt;B&gt;&gt;`</returns>,2
`Task&lt;IEnumerable&lt;B&gt;&gt;`,2
https://github.com/louthy/language-ext/issues/242,2
1);,2
Neutral,2
sensitivity,2
`Arr&lt;TryOption&lt;B&gt;&gt;`,2
`Task&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
`toList`,2
\diff(d,\,2
`OptionAsync&lt;TryOptionAsync&lt;B&gt;&gt;`,2
`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;`,2
`OptionUnsafe&lt;Option&lt;B&gt;&gt;`,2
c1(j),2
semigroup,2
\signs,\,2
`Task&lt;Try&lt;A&gt;&gt;`</returns>,2
assoc),2
\ChoiceUnsafeAsync<CH,\,2
<returns>`OptionAsync&lt;Seq&lt;B&gt;&gt;`</returns>,2
string</param>,2
Binary,2
Shifts,2
Sets,2
<example>For,2
actions,2
VectorClock</param>,2
someone,2
loop,2
<returns>`HashSet&lt;Lst&lt;B&gt;&gt;`</returns>,2
`Task&lt;TryOption&lt;A&gt;&gt;`</returns>,2
'octal',2
\name="\valuePromise"\>The\,2
report</returns>,2
\name="\Success"\>Action\,2
minimal,2
A>(y),2
<returns>Parsed,2
`TryAsync&lt;Arr&lt;A&gt;&gt;`</returns>,2
halves,2
optional(p),2
Common,2
hour,2
<returns>`Try&lt;Set&lt;A&gt;&gt;`</returns>,2
`OptionAsync&lt;Task&lt;B&gt;&gt;`,2
`Lst&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
<returns>`Seq&lt;Arr&lt;B&gt;&gt;`</returns>,2
`TryAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;IEnumerable&lt;B&gt;&gt;`,2
BindReturn(Unit,2
<returns>`TryOptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</returns>,2
double-precision,2
<returns>`Task&lt;Seq&lt;B&gt;&gt;`</returns>,2
<returns>`Arr&lt;Option&lt;A&gt;&gt;`</returns>,2
`p1`,2
`TryOptionAsync&lt;TryAsync&lt;B&gt;&gt;`,2
`OptionAsync&lt;Seq&lt;B&gt;&gt;`,2
<returns>`TryOptionAsync&lt;HashSet&lt;B&gt;&gt;`</returns>,2
`p2`,2
Applying,2
<returns>`Option&lt;Arr&lt;B&gt;&gt;`</returns>,2
<returns>`TryOption&lt;Lst&lt;A&gt;&gt;`</returns>,2
`HashSet&lt;Seq&lt;B&gt;&gt;`,2
wake,2
private,2
<returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;`</returns>,2
good,2
`OptionAsync&lt;Arr&lt;B&gt;&gt;`,2
user,2
multiplied,2
combinator:,2
Data,2
minuend),2
letterOrDigit,2
\name="\MonoidError"\>Monoid\,2
\name="\ma"\>Option\,2
`Set&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
\"\(50\,2
whenever,2
<returns>`TryAsync&lt;Task&lt;B&gt;&gt;`</returns>,2
`outputma`,2
\chainr1(p,op)\,2
bias,2
`Arr&lt;HashSet&lt;B&gt;&gt;`,2
`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
\name="\message"\>Exception\,2
<returns>`Task&lt;Set&lt;B&gt;&gt;`</returns>,2
front,2
`Seq&lt;Option&lt;B&gt;&gt;`,2
50,2
`TryOptionAsync&lt;Lst&lt;A&gt;&gt;`</returns>,2
Num<A>,2
<returns>`Lst&lt;Lst&lt;A&gt;&gt;`</returns>,2
bool),2
N,2
\OptionAsync,\,2
Meter,2
`Option&lt;OptionUnsafe&lt;B&gt;&gt;`,2
`TryOptionAsync&lt;HashSet&lt;B&gt;&gt;`,2
`Arr&lt;Try&lt;B&gt;&gt;`,2
\name="\U"\>First\,2
<returns>`Option&lt;Lst&lt;A&gt;&gt;`</returns>,2
\applicatives,\,2
\Reader<int,\,2
\Seq.span(List(1,2,3),\,2
Resolve,2
<returns>`Option&lt;Seq&lt;A&gt;&gt;`</returns>,2
`Set&lt;IEnumerable&lt;B&gt;&gt;`,2
both),2
\name="\state"\>State\,2
`TryAsync&lt;Lst&lt;A&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;`</returns>,2
idea,2
n),2
Mile,2
evalation,2
\between(open,close,p)\,2
_composition_,2
non-backtracking,2
`Seq&lt;Seq&lt;B&gt;&gt;`,2
'hexadecimal',2
memory-leak,2
\`take`,\,2
cryptographically,2
\name="\V"\>Value</typeparam>\,2
\Note,\,2
<returns>`Set&lt;Option&lt;A&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;`</returns>,2
`TryOptionAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,2
varies,2
credit,2
\name="\output"\>Output</param>\,2
properties</returns>,2
`Set&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
simple,2
\buildExpressionParser(table,term).label("\expression"\)\,2
<returns>`IEnumerable&lt;Set&lt;A&gt;&gt;`</returns>,2
actual,2
`Task&lt;Try&lt;B&gt;&gt;`,2
to:,2
Position,2
wish,2
comparable,2
\(TInt,\,2
constraints,2
b)</typeparam>,2
`Arr&lt;IEnumerable&lt;B&gt;&gt;`,2
fledged,2
<returns>`Task&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>EitherUnsafe</returns>,2
\'Edit',\,2
c2(j),2
monad.The,2
`HashSet&lt;Set&lt;B&gt;&gt;`,2
undesirable,2
'zero',2
`Lst&lt;TryOption&lt;B&gt;&gt;`,2
\endBy(p,sep)\,2
--2,2
`IEnumerable&lt;Lst&lt;B&gt;&gt;`,2
\(TFloat,\,2
defined.</typeparam>,2
\Out,\,2
nq)`,2
<returns>`Set&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`TryAsync&lt;Seq&lt;B&gt;&gt;`</returns>,2
mb();,2
E,2
FailMap,2
\name="\queue"\>Queue\,2
<returns>`Set&lt;Lst&lt;B&gt;&gt;`</returns>,2
\name="\seq"\>Enumerable\,2
Enumerator,2
\name="\EQ"\>Eq<B>\,2
didn't,2
\items"\),\,2
\div,\,2
`IEnumerable&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
\name="\SuccessMap"\>Function\,2
\instance,\,2
value/state,2
\name="\count"\>The\,2
`OptionAsync&lt;IEnumerable&lt;B&gt;&gt;`,2
<returns>`Seq&lt;Seq&lt;B&gt;&gt;`</returns>,2
(`Patch.composable`,2
SuccessValue,2
<returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;`</returns>,2
`Seq&lt;Lst&lt;B&gt;&gt;`,2
`Task&lt;TryOptionAsync&lt;B&gt;&gt;`,2
`TryOption&lt;HashSet&lt;B&gt;&gt;`,2
\name="\value"\>Error\,2
\name="\f"\>A\,2
(`OptionUnsafe<T>`),2
De-serialise,2
OO,2
\name="\T"\>Alternative\,2
\"\let"\\,2
<returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>`HashSet&lt;Try&lt;A&gt;&gt;`</returns>,2
\name="\V"\>Second\,2
<returns>`TryOptionAsync&lt;Arr&lt;B&gt;&gt;`</returns>,2
Any,2
`TryAsync&lt;TryOption&lt;B&gt;&gt;`,2
Enumerables,2
<returns>`IEnumerable&lt;Set&lt;B&gt;&gt;`</returns>,2
`Lst&lt;OptionUnsafe&lt;B&gt;&gt;`,2
Some(head)</returns>,2
one's,2
`MWriter`),2
copying,2
<returns>`TryOptionAsync&lt;Seq&lt;B&gt;&gt;`</returns>,2
`Set&lt;TryOption&lt;B&gt;&gt;`,2
0);,2
`HashSet&lt;Lst&lt;B&gt;&gt;`,2
\Task,\,2
info,2
WrappedMapTest(),2
<returns>`Try&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
Listen,2
\apply(diff(a,\,2
\chainl1(p,op)\,2
Associative,2
precendence,2
`TryOptionAsync&lt;Set&lt;B&gt;&gt;`,2
`Task&lt;TryAsync&lt;B&gt;&gt;`,2
<returns>Alternative,2
\"\lexical"\,\,2
\equal,\,2
Wagner-Fischer,2
MonadAsync,2
_then_,2
fields,2
`Task&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
(await,2
\!equals<EqString,\,2
x.ToLower());,2
`Option&lt;HashSet&lt;B&gt;&gt;`,2
`TryOptionAsync&lt;Arr&lt;B&gt;&gt;`,2
\name="\FAB"\>Type\,2
optionalList(p),2
f(Result),2
type-system's,2
\etc.),\,2
<returns>`HashSet&lt;Seq&lt;A&gt;&gt;`</returns>,2
Years,2
\relation),\,2
discriminated,2
`TryOptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
many(letterOrDigit),2
<returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;`</returns>,2
Subtracts,2
\name="\B"\>Match\,2
best,2
state</typeparam>,2
respectively,2
<returns>`HashSet&lt;Arr&lt;A&gt;&gt;`</returns>,2
(s,2
`Set&lt;HashSet&lt;B&gt;&gt;`,2
Revision,2
`TryAsync&lt;Set&lt;B&gt;&gt;`,2
\name="\key"\></param>\,2
<returns>Result</returns>,2
complement,2
major,2
<returns>`Seq&lt;TryOption&lt;B&gt;&gt;`</returns>,2
<returns>`TryOption&lt;HashSet&lt;A&gt;&gt;`</returns>,2
program,2
semi,2
\Arr,\,2
\TDecimal,\,2
positional,2
`Try&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
However,2
MonadPlus,2
\assoc,\,2
`TryOption&lt;IEnumerable&lt;B&gt;&gt;`,2
transaction,2
<returns>`Task&lt;Option&lt;B&gt;&gt;`</returns>,2
`HashSet&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
(with,2
<returns>`Option&lt;TryOption&lt;A&gt;&gt;`</returns>,2
`Seq&lt;Arr&lt;B&gt;&gt;`,2
<returns>`Option&lt;HashSet&lt;A&gt;&gt;`</returns>,2
certain,2
optionalSeq(p),2
`TryAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
`TryOptionAsync&lt;Option&lt;B&gt;&gt;`,2
`Task&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
\name="\NUM"\>Subtract\,2
ma();,2
<returns>`OptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
incr),2
real,2
\endBy1(p,sep)\,2
`TryOption&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
monad's,2
success</typeparam>,2
unexpected,2
`Task&lt;Seq&lt;A&gt;&gt;`</returns>,2
Like,2
\BindReturn((W,\,2
\either(parens(expr),natural).label("\simple\,2
<returns>`Try&lt;Set&lt;B&gt;&gt;`</returns>,2
sb,2
'inverse',2
larger,2
be:,2
<returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
alias,2
\apply(diff(d,e),\,2
cons,2
<returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;`</returns>,2
(classes,2
\increment,\,2
`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;`,2
reflection,2
flag,2
`TryAsync&lt;Task&lt;B&gt;&gt;`,2
<returns>`Task&lt;TryOption&lt;B&gt;&gt;`</returns>,2
r3,2
Saving,2
Commonly,2
`Task&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
suspect,2
Language-Ext,2
<returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
document's,2
`Lst&lt;IEnumerable&lt;B&gt;&gt;`,2
`TryOptionAsync&lt;Task&lt;A&gt;&gt;`</returns>,2
`Task&lt;Set&lt;B&gt;&gt;`,2
dividing,2
unified,2
`Set&lt;Seq&lt;B&gt;&gt;`,2
<returns>`Lst&lt;Lst&lt;B&gt;&gt;`</returns>,2
interpolation,2
`Task&lt;OptionAsync&lt;B&gt;&gt;`,2
<returns>`Set&lt;TryOption&lt;B&gt;&gt;`</returns>,2
Some<A>(...),2
<returns>`Try&lt;Option&lt;A&gt;&gt;`</returns>,2
\optional,\,2
`Set&lt;Option&lt;B&gt;&gt;`,2
<returns>`TryOption&lt;Arr&lt;A&gt;&gt;`</returns>,2
shift:,2
They,2
`Lst&lt;Set&lt;B&gt;&gt;`,2
\Some<A,B>(...)\,2
<returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
`HashSet&lt;IEnumerable&lt;B&gt;&gt;`,2
notFollowedBy,2
'GenTokenParser',2
\name="\Env"\>The\,2
<returns>`TryOption&lt;TryOption&lt;A&gt;&gt;`</returns>,2
\NewType<Hours,\,2
<returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
\e),\,2
\Validation,\,2
\count(n,p)\,2
\name="\delayFor"\>Time\,2
Ordered,2
<returns>`Try&lt;Arr&lt;B&gt;&gt;`</returns>,2
res2,2
cs,2
\HashSet,\,2
left-hand,2
<returns>`Task&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
Combine,2
many(p),2
`TryOptionAsync&lt;OptionAsync&lt;B&gt;&gt;`,2
<returns>`Arr&lt;Lst&lt;A&gt;&gt;`</returns>,2
`Seq&lt;TryOption&lt;B&gt;&gt;`,2
`TryOption&lt;Seq&lt;B&gt;&gt;`,2
\Divisible,\,2
</typeparam>,2
non-nullable,2
Suppose,2
\parse(expr,\,2
rule,2
<returns>`Option&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>`Set&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
(0..1,2
`Try&lt;Set&lt;B&gt;&gt;`,2
`OptionUnsafe&lt;Seq&lt;B&gt;&gt;`,2
Internal,2
<returns>`Set&lt;Try&lt;B&gt;&gt;`</returns>,2
<returns>`TryOptionAsync&lt;Task&lt;B&gt;&gt;`</returns>,2
COM,2
`TryAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,2
retrace,2
<returns>`TryOption&lt;Set&lt;B&gt;&gt;`</returns>,2
<returns>`Seq&lt;TryOption&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,2
GC.GetTotalMemory(false),2
`TryOption&lt;Try&lt;B&gt;&gt;`,2
`Option&lt;Seq&lt;B&gt;&gt;`,2
change,2
`Try&lt;Seq&lt;B&gt;&gt;`,2
effectively,2
<returns>`Seq&lt;Lst&lt;B&gt;&gt;`</returns>,2
required,2
`OptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
<returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
<returns>`Set&lt;Arr&lt;B&gt;&gt;`</returns>,2
<returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>`TryOption&lt;HashSet&lt;B&gt;&gt;`</returns>,2
causing,2
\tells,\,2
permitted,2
\default(MonoidW).Append(output.Item1,\,2
knowledge,2
\_document_,\,2
guaranteed,2
failure(msg),2
<returns>`HashSet&lt;Option&lt;B&gt;&gt;`</returns>,2
`Try&lt;TryOption&lt;B&gt;&gt;`,2
.Apply(SomeUnsafe(3)),2
<returns>`Seq&lt;Try&lt;A&gt;&gt;`</returns>,2
\succeeds,\,2
\Seq<TryAsync<int>>,\,2
`struct`,2
<returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;Option&lt;B&gt;&gt;`,2
<returns>`Option&lt;TryOption&lt;B&gt;&gt;`</returns>,2
`Lst&lt;Task&lt;A&gt;&gt;`</returns>,2
\'None',\,2
\either(ps[index],\,2
`Return`,2
`Task&lt;HashSet&lt;B&gt;&gt;`,2
<returns>`Try&lt;TryOption&lt;B&gt;&gt;`</returns>,2
<returns>`Try&lt;Try&lt;B&gt;&gt;`</returns>,2
`MState`,2
`Set&lt;OptionUnsafe&lt;B&gt;&gt;`,2
speeds,2
Operator.Prefix<int>(from,2
\name="\value"\>OptionAsync</param>\,2
\!equals<EqArray<int>,\,2
<returns>`Option&lt;Arr&lt;A&gt;&gt;`</returns>,2
undefined:,2
<returns>`HashSet&lt;Option&lt;A&gt;&gt;`</returns>,2
`IEnumerable&lt;TryOption&lt;B&gt;&gt;`,2
`Option&lt;Lst&lt;B&gt;&gt;`,2
<returns>`Lst&lt;Arr&lt;A&gt;&gt;`</returns>,2
errors</typeparam>,2
C),2
`HashSet&lt;Try&lt;B&gt;&gt;`,2
`TryAsync&lt;OptionAsync&lt;B&gt;&gt;`,2
\sepEndBy(p,sep)\,2
`TryOptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
`HashSet&lt;Option&lt;B&gt;&gt;`,2
<returns>`TryAsync&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
<returns>IObservable,2
`Delete`,2
instance.This,2
`OptionAsync&lt;HashSet&lt;B&gt;&gt;`,2
accurate,2
notFollowedBy(p),2
\`Reader`,\,2
Day,2
generator,2
restricts,2
`OptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,2
looks,2
\evaluation,\,2
\name="\RightAsync"\>Action\,2
<returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
`takeComposed`,2
<returns>`Option&lt;Option&lt;A&gt;&gt;`</returns>,2
<returns>`Lst&lt;Seq&lt;B&gt;&gt;`</returns>,2
previously,2
follows:,2
<returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
`OptionUnsafe&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
<returns>`TryOption&lt;Set&lt;A&gt;&gt;`</returns>,2
\name="\RightAsync"\>Predicate</param>\,2
for</param>,2
repeated,2
octal,2
`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;`,2
Funcs,2
default(MonadA).Return(a);,2
collecting,2
subtracting,2
\name="\value"\>value\,2
output</returns>,2
`OptionAsync&lt;Arr&lt;A&gt;&gt;`</returns>,2
\name="\NUM"\>Foldable\,2
partial,2
per-second,2
`Task&lt;Lst&lt;B&gt;&gt;`,2
expression</typeparam>,2
`OptionUnsafe&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
\name="\LeftAsync"\>Folder\,2
<returns>`Seq&lt;Lst&lt;A&gt;&gt;`</returns>,2
at-most-once,2
line-feed,2
\S,\,2
\name="\Succ"\>Action\,2
Centimeter,2
neok,2
\open,\,2
Left(y),2
\itself,\,2
<returns>`HashSet&lt;Lst&lt;A&gt;&gt;`</returns>,2
\internally,\,2
`TryOptionAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,2
`Option&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
`TryOption&lt;Lst&lt;B&gt;&gt;`,2
Kilometres,2
`OptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
making,2
\name="\mb"\>Monadic\,2
ComVisible,2
<returns>`Lst&lt;Try&lt;B&gt;&gt;`</returns>,2
\name="\A"\>Set\,2
Interable:,2
\name="\ma"\>Tuple\,2
<returns>`OptionAsync&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
Fractional,2
limitations,2
<returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
IAppendable,2
format:,2
at.</param>,2
<returns>`Set&lt;Try&lt;A&gt;&gt;`</returns>,2
non-reduced,2
evaluated,2
`Seq&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,2
evaluates,2
<returns>`TryOptionAsync&lt;TryOption&lt;B&gt;&gt;`</returns>,2
<returns>`TryOption&lt;Seq&lt;B&gt;&gt;`</returns>,2
\_,\,2
brackets,2
'IEnumerable&lt;A&gt;',2
\inverses,\,2
\testing,\,2
relative,2
`Lst&lt;Seq&lt;B&gt;&gt;`,2
`Set&lt;Arr&lt;B&gt;&gt;`,2
20),2
<returns>`Task&lt;Lst&lt;B&gt;&gt;`</returns>,2
\Multiplicable,\,2
strips,2
<returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
satisfy(pred),2
<returns>`Seq&lt;HashSet&lt;A&gt;&gt;`</returns>,2
`RunAsync`,2
\match(z,\,2
comma,2
\name="\LeftAsync"\>Action\,2
`Lst&lt;Arr&lt;B&gt;&gt;`,2
mplus,2
attributes,2
unexpected(msg),2
Operator<int>[][],2
<returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
dispatches,2
\NewType<Metres,\,2
letters,2
<returns>`Seq&lt;Set&lt;A&gt;&gt;`</returns>,2
\name="\anything"\>Alternative\,2
\name="\A"\>Record\,2
`IEnumerable&lt;Try&lt;B&gt;&gt;`,2
<returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;`</returns>,2
permanent,2
if(info,2
culture),2
`Task&lt;HashSet&lt;A&gt;&gt;`</returns>,2
<returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
/one/,2
<returns>`Try&lt;Lst&lt;B&gt;&gt;`</returns>,2
\name="\Fail"\>Action\,2
`Seq&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
tailsr,2
`OptionAsync&lt;Option&lt;A&gt;&gt;`</returns>,2
minus,2
<returns>`Lst&lt;TryOption&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,2
reservedOp,2
<returns>`IEnumerable&lt;Option&lt;A&gt;&gt;`</returns>,2
\removed,\,2
`Task&lt;Option&lt;B&gt;&gt;`,2
constrain,2
`Task&lt;Set&lt;A&gt;&gt;`</returns>,2
label,2
true),2
\name="\NUM"\>Divide\,2
Expected,2
covariance,2
CHOICE,2
\input/,\,2
`IEnumerable&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
Some(Action),2
prototypes,2
<returns>`TryAsync&lt;Lst&lt;B&gt;&gt;`</returns>,2
`ma`,2
resultant,2
<returns>`Set&lt;HashSet&lt;B&gt;&gt;`</returns>,2
modulus,2
falls,2
`Task&lt;Seq&lt;B&gt;&gt;`,2
\name="\FTUV"\>Target\,2
Legal,2
`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,2
\zero,\,2
'lets'),2
<returns>`Set&lt;Set&lt;A&gt;&gt;`</returns>,2
<returns>`Seq&lt;Option&lt;A&gt;&gt;`</returns>,2
_equivalent_,2
sorting,2
\cref="\BottomException"\>EitherUnsafeT\,2
<returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;`</returns>,2
<returns>`OptionAsync&lt;Set&lt;B&gt;&gt;`</returns>,2
`OptionUnsafe&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
\Assert.Equal(None,\,2
Fund,2
<returns>`TryOption&lt;Lst&lt;B&gt;&gt;`</returns>,2
`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;`,2
\add,\,2
\var(a,\,2
<returns>`TryAsync&lt;Option&lt;B&gt;&gt;`</returns>,2
x);,2
`Seq&lt;Set&lt;B&gt;&gt;`,2
msg,2
go,2
`TryOptionAsync&lt;OptionUnsafe&lt;B&gt;&gt;`,2
\prefix("\+"\,id)\,2
ones,2
<returns>`TryOption&lt;Option&lt;B&gt;&gt;`</returns>,2
for</typeparam>,2
`OptionAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,2
`Patch.apply`),2
listen,2
<returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</returns>,2
buildExpressionParser,2
`TryOption&lt;TryOption&lt;B&gt;&gt;`,2
parser's,2
<returns>`TryAsync&lt;Arr&lt;B&gt;&gt;`</returns>,2
\subtr,\,2
\TryOption,\,2
Set<T>,2
`Task&lt;Task&lt;B&gt;&gt;`,2
5),2
\'let'),\,2
`Option<A>`,2
\name="\tail"\>Remaining\,2
structurally,2
\character,\,2
member,2
\apply(append(diff(a,\,2
`OptionUnsafe&lt;Arr&lt;B&gt;&gt;`,2
<returns>`Option&lt;Seq&lt;B&gt;&gt;`</returns>,2
Unknown,2
\f,\,2
<returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;`</returns>,2
\name="\Fail"\>Value\,2
Faster,2
<returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
'standard',2
\sepBy1(p,sep)\,2
`OptionAsync&lt;Seq&lt;A&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;`</returns>,2
<returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;`</returns>,2
`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;`,2
`OptionAsync&lt;Try&lt;A&gt;&gt;`</returns>,2
\associativity,\,2
ver1,2
\`Option`,\,2
<returns>`Try&lt;HashSet&lt;A&gt;&gt;`</returns>,2
bigger,2
error),2
<returns>`OptionAsync&lt;OptionAsync&lt;B&gt;&gt;`</returns>,2
thread-safe,2
p2)`,2
`OptionUnsafe&lt;Lst&lt;B&gt;&gt;`,2
\name="\foldable"\>Foldable\,2
all:,2
<returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;`</returns>,2
<returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>,2
<returns>`HashSet&lt;Set&lt;B&gt;&gt;`</returns>,2
`A1,2
setting,2
<returns>`Set&lt;Seq&lt;B&gt;&gt;`</returns>,2
HSet.empty,2
expected</param>,2
boundary,2
consumed),2
OptionAsync&lt;B&gt;&gt;`</returns>,2
core,2
\CH,\,2
Hours,2
filled,2
-2++,2
<returns>`Option&lt;Lst&lt;B&gt;&gt;`</returns>,2
land,2
character</returns>,2
side</param>,2
\TransSyncAsync<MSeq<TryAsync<int>>,\,2
<returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;`</returns>,2
<returns>`Set&lt;Seq&lt;A&gt;&gt;`</returns>,2
ps[index],2
sense,2
\name="\Fail"\>Folder\,2
Since,2
<returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,2
`TryAsync&lt;Seq&lt;B&gt;&gt;`,2
`TryOption&lt;TryAsync&lt;A&gt;&gt;`</returns>,2
`Lst&lt;HashSet&lt;B&gt;&gt;`,2
writeer</param>,2
\'decimal',\,2
attribute,2
c1(i),2
right-biased,2
Calculated,2
`OptionAsync&lt;Lst&lt;A&gt;&gt;`</returns>,2
dec,1
\name="\E"\>Type\,1
\long,\,1
reserved(name),1
Savely,1
Lengths,1
StringBuilder(),1
\expression,\,1
method:,1
\ABCDEABCDEABCDE,\,1
<returns>`TryOptionAsync&lt;TryOption&lt;C&gt;&gt;`,1
Call,1
1.Metre(),1
\'space',\,1
ConstString,1
\error,\,1
Merge,1
contiguous,1
Assert.True(x[4],1
AccountName,1
GenLanguageDef,1
\sa,\,1
<returns>`OptionAsync&lt;Task&lt;A&gt;&gt;`</returns>,1
<returns>`OptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,1
lens,1
<returns>`TryOption&lt;Option&lt;C&gt;&gt;`,1
<returns>`OptionAsync<T>`,1
disjunctions,1
1*kilometre;,1
<returns>`Lst&lt;Option&lt;C&gt;&gt;`,1
Operator,1
\name="\BiFunctorAB"\>struct\,1
Error(),1
creation,1
<returns>`TryAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,1
curried(a)(b)(c)(d)(e)(f)(g)(h)(i)(j),1
<returns>`IEnumerable&lt;Option&lt;C&gt;&gt;`,1
unnecessary,1
20,1
\`append(a,\,1
notnull(z),1
sensitive,1
*before*,1
logs,1
infer,1
transfers,1
ApplySomeArgsF(),1
\name="\arg2"\>computation\,1
\"\:"\\,1
typeof(FieldType),1
curried(a)(b),1
7*millisecond;,1
Kilometers,1
Assert.True(list[4],1
<returns>`OptionAsync&lt;Lst&lt;A&gt;&gt;`</returns>,1
<returns>`Try&lt;Arr&lt;C&gt;&gt;`,1
\name="\RightAsync"\>Value\,1
let's,1
https://github.com/louthy/language-ext/issues/245,1
Individual,1
Mitigates,1
1</param>,1
hexadecimal,1
\IsFaulted),\,1
\buggy,\,1
64,1
terminates,1
\name="\anything"\>Value\,1
Edit.Delete,1
\name="\generator"\>Generator\,1
<returns>`TryOptionAsync&lt;Lst&lt;A&gt;&gt;`</returns>,1
1*centimetre;,1
insensitive,1
<returns>`TryAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,1
balance,1
y.IsNull(),1
<returns>`OptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,1
NumType(y),1
*mutable*,1
<returns>`OptionUnsafe&lt;OptionUnsafe&lt;C&gt;&gt;`,1
captured,1
Task<Option<A>>>,1
`Object`,1
NoWorky(x),1
fn,1
expensive,1
hex,1
end-of-line,1
notDefault(1),1
outcomes,1
FOption,1
linked,1
though,1
appropriate,1
Multiplies,1
\IO,\,1
projected,1
\name="\SELF"\>The\,1
\name="\OuterType"\></typeparam>\,1
Op2(),1
CondAsync,1
next,1
<returns>Either,1
Int32.MaxValue).Iter(i,1
<returns>EitherUnsafeUnsafe</returns>,1
non-empty,1
Script,1
15,1
(zero).1The,1
\Some(Set(1,2,3));\,1
If/Else,1
Simple,1
ReaderListSumFoldTest(),1
<returns>Tail,1
\(MetresPerSecond2,\,1
right.Zeroleft,1
\OptionAsync<B>.None,\,1
\space,\,1
<returns>`Task&lt;OptionUnsafe&lt;C&gt;&gt;`,1
'newline'),1
<returns>`HashSet&lt;Option&lt;C&gt;&gt;`,1
\item"\),\,1
\tuple,\,1
\name="\account"\>Account\,1
controlled,1
lives,1
resolves,1
10*mm2;,1
A>>,1
7*day;,1
Propagate,1
\`TryOptionAsync`,\,1
<returns>`Task&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,1
angles(p),1
you'll,1
\wiki,\,1
ApplicativeLawHolds(),1
<returns>`Set&lt;Option&lt;C&gt;&gt;`,1
\toOptionUnsafeAsync<CHOICE,\,1
<returns>`TryOption&lt;Lst&lt;C&gt;&gt;`,1
those,1
Areas,1
100*centimetre2;,1
<returns>`OptionAsync&lt;Seq&lt;A&gt;&gt;`</returns>,1
\`State`,\,1
Eq<bool>,1
BankingFree<A>,1
Ord<bool>,1
\tests,\,1
(tokens),1
shared,1
\"\0x"\\,1
'No,1
\TransAsync<MTask<TryAsync<int>>,\,1
syntax,1
Meters,1
Observable,1
Assert.True(x[1],1
requested,1
<returns>`Set&lt;Try&lt;C&gt;&gt;`,1
Update,1
invoked</param>,1
\`Head`,\,1
TryAsync(CombineAndOrder),1
7*kilometres;,1
visible,1
50s,1
SeqEmpty,1
<returns>OptionUnsafe,1
brackets(p),1
typelib,1
settle,1
resolution,1
Hello(Error()),1
bigint.Zero,1
<returns>`TryAsync&lt;Try&lt;C&gt;&gt;`,1
\name="\arg1"\>computation\,1
date,1
bigint.Zero;,1
nature,1
baseValue,1
`OptionAsync`,1
'crlf'),1
\name="\map"\>Mapping\,1
\"\0O"\\,1
lang-ext,1
non-human,1
consing,1
asyncMap(disposable)</returns>,1
ease,1
7*days;,1
Liftable<A>,1
<returns>`Task&lt;TryOption&lt;A&gt;&gt;`</returns>,1
\Centimetres,\,1
OptionUnsafeAsync<B>(Do(ma));,1
currenty,1
1900-1999,1
'prelude';,1
inspecting,1
;,1
sb.Append('('),1
LF,1
**non,1
<returns>`TryAsync&lt;Arr&lt;C&gt;&gt;`,1
benefit,1
30);,1
\LanguageDef,\,1
\monoids,\,1
<returns>`Arr&lt;Arr&lt;C&gt;&gt;`,1
structures,1
<returns>Base64,1
\Monadic,\,1
<returns>`Arr&lt;Seq&lt;C&gt;&gt;`,1
Raise,1
SomeLiftTest(),1
A>>`,1
7*hours;,1
Task<Option<int>>,1
incremented,1
negative.0The,1
\`>`,\,1
<returns>`OptionUnsafe&lt;Arr&lt;C&gt;&gt;`,1
velocity,1
Being,1
semiSep(p),1
comparing,1
char('_')),1
s),1
zero),1
definied,1
'mconcat',1
1*kilometer;,1
ideas,1
Force,1
'OptionAsync',1
\name="\stack"\>First\,1
truly,1
\EitherUnsafe<L,\,1
\(MetresPerSecond,\,1
Assert.True(set.Contains(4));,1
Fully,1
'd'),1
scripting,1
done),1
outgoing,1
tasks,1
10*millimeters;,1
inefficient,1
values:,1
Seq()),1
7*seconds;,1
(The,1
found),1
base-64,1
`q`,1
behaviours,1
-3,1
0-f),1
'mutation',1
scoped,1
\Seq(1,2,3))\,1
Assert.True(b[4],1
\SqCentimetres,\,1
hacky,1
\"\(mlst)\,1
Assert.True(set.Contains(2));,1
\name="\unit"\>()</param>\,1
S(S(KS)K(S(KS)K)S)(KK),1
object;,1
decremented,1
\assemblies,\,1
Assert.True(a[1],1
requirement,1
\name="\I"\>Input\,1
semiSep1(p),1
`Edit`,1
list_,1
<returns>`OptionAsync&lt;HashSet&lt;C&gt;&gt;`,1
MQue,1
\reflexive,\,1
appropiate,1
LanguageExt.TypeClass,1
\together,\,1
10*metre2;,1
<returns>`Arr&lt;HashSet&lt;C&gt;&gt;`,1
150);,1
<returns>`TryOptionAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,1
[,1
\techniques,\,1
'skip',1
B>.Right)).data;,1
c(2),1
Lift,1
large,1
punctuation,1
\infinite,\,1
integral,1
Assert.True(o2.CountT(),1
Assert.True(x[3],1
<returns>`Seq&lt;Try&lt;C&gt;&gt;`,1
notnull(x),1
\accessed,\,1
\Exception("\Nooooo"\);\,1
/before/,1
Assert.True(a[4],1
x.IsNull(),1
Bool<bool>,1
\Calculate(x,\,1
script,1
('a'..'z'),1
FOptionUnsafe,1
ledger,1
'float',1
ScriptExpr,1
\types,\,1
Internal:,1
(0-7),1
<returns>`IEnumerable&lt;Seq&lt;C&gt;&gt;`,1
('z'..'a'),1
<returns>`TryOptionAsync&lt;Option&lt;A&gt;&gt;`</returns>,1
\Bool<(bool,\,1
curried(a)(b)(c)(d)(e),1
pushout,1
b))`,1
ReaderWriterBindTest(),1
value),1
propagated,1
Information,1
`Seq.Empty`,1
\Map<A<Map<B,C>>\,1
\[1,2,3,4,5,6]\,1
Accel,1
disjunction,1
global,1
<returns>`Seq&lt;OptionUnsafe&lt;C&gt;&gt;`,1
(`GetHashCode`),1
Analysis,1
higher-kind,1
7*km2;,1
predication,1
race,1
<returns>`Task&lt;Task&lt;A&gt;&gt;`</returns>,1
<returns>`TryAsync&lt;OptionUnsafe&lt;C&gt;&gt;`,1
return;,1
10*mm;,1
concurrently,1
<returns>`TryAsync&lt;Try&lt;A&gt;&gt;`</returns>,1
thought,1
<returns>`IEnumerable&lt;HashSet&lt;C&gt;&gt;`,1
OrdA,1
With,1
embed</param>,1
cT,1
\name="\lists"\>Enumerables\,1
waiting,1
Native,1
fn.Memo();,1
field-name,1
wrapper,1
`O(a,1
ReaderListSumTest(),1
\name="\self"\>TryOption\,1
\everyone"\);\,1
\Seq.span(List(1,2,3,4,1,2,3,4),\,1
10*millimeter2;,1
independantly,1
known,1
<returns>`OptionUnsafe&lt;HashSet&lt;C&gt;&gt;`,1
10*m;,1
Op3(),1
symbols,1
(x,1
<returns>`TryAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,1
100*centimetres,1
task</returns>,1
\Reader<Env,A>\,1
stylised,1
<returns>`OptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,1
strict,1
<returns>`TryAsync&lt;Task&lt;A&gt;&gt;`</returns>,1
\another,\,1
WeakReference,1
<returns>`Seq&lt;HashSet&lt;C&gt;&gt;`,1
<returns>`HashSet&lt;Set&lt;C&gt;&gt;`,1
operator:,1
7*hrs;,1
<returns>b(a(v))</returns>,1
\arguments,\,1
\valid,\,1
Assert.True(c[5],1
undefined,1
ApplyNoneArgsF(),1
guess,1
`Option<>`),1
1.Second(),1
parts,1
kinded',1
OptionalListAppend(),1
\GC,\,1
\thing,\,1
started,1
(obviously,1
<returns>Whether,1
\name="\a"\>OptionUnsafe\,1
<returns>`TryAsync&lt;Set&lt;A&gt;&gt;`</returns>,1
persistent,1
<returns>`Task&lt;Option&lt;A&gt;&gt;`</returns>,1
\"\E"\)));\,1
5000,1
incoming,1
IsFaulted),1
end-of-file,1
HMap,1
\`Take`,\,1
lexer.Braces(p);,1
\`Slice`,\,1
'c'),1
ints,1
MonoidOrdA.Empty(),1
unlike,1
IObservable&lt;Nullable&lt;T&gt;&gt;,1
Possible,1
'reservedOp',1
conflicts,1
v1.SumT(),1
Guid,1
\failwith<Unit>("\two\,1
\World"\\,1
sorts,1
7*km;,1
\(Seq(1,2),\,1
\5,\,1
ma(state)(state);,1
\(SqMetres,\,1
Centimeters,1
\`ma(state)(state)`),\,1
\`composable(p,\,1
(XOr),1
strictly,1
might,1
tab,1
Haskell98,1
\positive,\,1
\name="\PredItem"\>Predicate\,1
Type.GetTypeFromHandle(typeof(FieldType)),1
7,1
\name="\Key"\>Key</param>\,1
`Task`),1
'semi',1
Increment,1
`transform`,1
<returns>OptionUnsafe<T>,1
Assert.True(x[5],1
ignore</param>,1
Uncomment,1
\`Monad<Option<A>,\,1
lift,1
\name="\value"\>TryAsync\,1
important,1
<returns>`OptionUnsafe&lt;Seq&lt;C&gt;&gt;`,1
mutation,1
10*millimetres;,1
sub-class,1
EitherAsyncs,1
lowercase,1
white-space,1
\failwith<Unit>("\wrong"\));\,1
\B>(State<S,\,1
<returns>`OptionAsync&lt;Seq&lt;C&gt;&gt;`,1
<returns>`Seq&lt;Arr&lt;C&gt;&gt;`,1
MemoMemoryTest(),1
bigint.One,1
character(\'\\n\'),1
new-line,1
`transformWith`,1
Centimetres,1
tryread((),1
language's,1
c2(i),1
\"\Parsec.Text.Token"\\,1
\name="\num"\>Numerator</param>\,1
Very,1
<returns>`Set&lt;Lst&lt;C&gt;&gt;`,1
inherent,1
Step,1
lexer.Reserved;,1
notDefault(0),1
Cond.Else(),1
Task.Run((),1
Name,1
bigint.One;,1
encoded</param>,1
\(a,b,c)\,1
OptionalUnsafe<A>,1
lexeme(p),1
\name="\value"\>TryOptionAsync\,1
handled,1
\name="\generator"\>Disposable\,1
\name="\MonoidFail"\></typeparam>\,1
<returns>`Task&lt;HashSet&lt;A&gt;&gt;`</returns>,1
(S,1
-1.05e+003,1
<returns>`IEnumerable&lt;Set&lt;C&gt;&gt;`,1
perhaps,1
`SelectMany`,1
ApplicationException,1
interpreted,1
deposits,1
\name="\nodeId"\>Node\,1
point(four,1
t2,1
Assert.True(r,1
SuppressMessage,1
\Either<L,\,1
orders,1
<returns>`Lst&lt;TryOption&lt;C&gt;&gt;`,1
IEnumerableT,1
BEFORE,1
FieldType),1
\right,\,1
efficient),1
Some(10));,1
<returns>`TryOptionAsync&lt;Arr&lt;A&gt;&gt;`</returns>,1
type-classes,1
\name="\ex"\>Exception\,1
Assert.True(x[2],1
\v2.FoldT(0,\,1
Power,1
<returns>`Seq&lt;TryOption&lt;C&gt;&gt;`,1
100*cm;,1
mutated,1
starts,1
\name="\v2"\>The\,1
\asynchronously,\,1
collections,1
<returns>`Option&lt;Lst&lt;C&gt;&gt;`,1
mistake,1
<returns>`Task&lt;Set&lt;A&gt;&gt;`</returns>,1
200);,1
static**,1
<returns>`Option&lt;Seq&lt;C&gt;&gt;`,1
TryAsync<Unit>,1
features,1
against</typeparam>,1
::,1
expired,1
\MOption<int>,\,1
tryadd,1
<returns>`Task&lt;HashSet&lt;C&gt;&gt;`,1
types:,1
B>(Do(ma));,1
\match(mopt,\,1
<returns>`Lst&lt;HashSet&lt;C&gt;&gt;`,1
`MState`:,1
BindReturn((S,1
exclusive,1
curried(a)(b)(c)(d)(e)(f),1
<returns>`Seq&lt;Option&lt;C&gt;&gt;`,1
<returns>`Arr&lt;Set&lt;C&gt;&gt;`,1
notnull(y),1
collaborative,1
valuable,1
7*hr;,1
table.ValueConditionLess,1
Edit.Replace,1
r2.SumT()(10);,1
<returns>`Try&lt;Lst&lt;C&gt;&gt;`,1
<returns>`TryOptionAsync&lt;Seq&lt;C&gt;&gt;`,1
By,1
Assert.True(mlst.CountT(),1
\name="\max"\>Maximum\,1
(double,1
.IfLeft(0);,1
\name="\tail"\></param>\,1
\Eq<(bool,\,1
<returns>`Option&lt;HashSet&lt;C&gt;&gt;`,1
<returns>`Seq&lt;Seq&lt;C&gt;&gt;`,1
life,1
reader</returns>,1
\name="\ma"\>computation\,1
MStack,1
metre,1
\"\0o"\\,1
Fahrenheit,1
holder,1
Token,1
\`ma(state)`,\,1
Miles,1
incorporate,1
123),1
'OptionUnsafe',1
Assert.True(list[0],1
B>>,1
<returns>`TryOption&lt;Arr&lt;C&gt;&gt;`,1
capture,1
decrement,1
Assert.True(b[5],1
\name="\lists"\>sequences\,1
r.Lift(123)),1
246);,1
\i,\,1
/concurrent/,1
identities,1
\name="\T"\>Item\,1
selects,1
\`Tail`,\,1
Op1(),1
necessary,1
1.SqMetre(),1
*after*,1
interpolated,1
E</returns>,1
<returns>`Arr&lt;TryOption&lt;C&gt;&gt;`,1
two;,1
string>,1
Edits,1
curried(a)(b)(c)(d)(e)(f)(g)(h)(i),1
\name="\ma"\>OptionUnsafe\,1
IsReadOnly,1
compiler,1
<returns>`Lst&lt;Set&lt;C&gt;&gt;`,1
Modifications,1
semi-colon,1
tokens,1
concurrent,1
Test(),1
Task<TryAsync<A>>>,1
<returns>`HashSet&lt;Lst&lt;C&gt;&gt;`,1
Operational,1
FOptionAsync,1
`value`,1
commaSep1(p),1
\system,\,1
<returns>!value</returns>,1
parens,1
\antisymetic,\,1
'records',1
`Select`,1
<returns>`Task&lt;Try&lt;C&gt;&gt;`,1
parseInt,1
\`!=`,\,1
<returns>`Set&lt;HashSet&lt;C&gt;&gt;`,1
<returns>`IEnumerable&lt;Try&lt;C&gt;&gt;`,1
`Eq<string>`,1
\Trans<MLst<Option<int>>,\,1
Assert.True(o2.Count(),1
\name="\RECORDTYPE"\></typeparam>\,1
functional,1
<returns>`OptionAsync&lt;Set&lt;A&gt;&gt;`</returns>,1
\failwith<Unit>("\no\,1
BankingFree,1
<returns>`TryAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,1
\name="\T"\>Parsed\,1
lexer.Parens(p);,1
placed,1
c;,1
overlap,1
Assert.True(list[1],1
<returns>`HashSet&lt;OptionUnsafe&lt;C&gt;&gt;`,1
\name="\A"\>Element\,1
symbol(s),1
valueexponent,1
\parsed,\,1
100*centimeter2;,1
exposed,1
modify::MonadState,1
lengths,1
1*millimetre;,1
Eq<string>,1
built-in,1
7*second;,1
Assert.True(set.Contains(1));,1
100s,1
<returns>`Task&lt;TryOption&lt;C&gt;&gt;`,1
\Some(Map(Tuple(1,\,1
\Some(List(4,\,1
\"\/*"\\,1
line),1
Iter,1
o2,1
operands,1
GUID,1
<returns>`OptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,1
Assert.True(c[4],1
`Run(ma)`,1
asyncMap(generator())</returns>,1
\name="\m"\>Reader\,1
<returns>`HashSet&lt;TryOption&lt;C&gt;&gt;`,1
skip,1
Some(Some(10));,1
<returns>`TryAsync&lt;TryOption&lt;C&gt;&gt;`,1
<returns>`Try&lt;TryOption&lt;C&gt;&gt;`,1
1.MetrePerSecond(),1
GC,1
`S`,1
withdrawals,1
\`append(p,\,1
lst,1
Declared,1
<returns>`IEnumerable&lt;TryOption&lt;C&gt;&gt;`,1
<returns>`OptionAsync&lt;Option&lt;A&gt;&gt;`</returns>,1
gaps,1
default(MONADB).Run(state,1
todays,1
\Assert.True(res.LiftT("\World"\)\,1
finds,1
<returns>`Arr&lt;Lst&lt;C&gt;&gt;`,1
Assert.True(lst.CountT(),1
declaration,1
Unary,1
\`TryAsync`,\,1
FloatType(y),1
dividend,1
Identifies,1
transform,1
<returns>`TryOption&lt;TryOption&lt;C&gt;&gt;`,1
capable,1
Replace,1
Assert.True(b[1],1
memo,1
Try((),1
<returns>`OptionAsync&lt;Set&lt;C&gt;&gt;`,1
\"\(lst)\,1
<returns>`TryOptionAsync&lt;Seq&lt;A&gt;&gt;`</returns>,1
Y,1
Hello(Error())),1
`IsEmpty`,1
1*millimetre2;,1
lexer.Identifier;,1
<returns>`Task&lt;OptionAsync&lt;A&gt;&gt;`</returns>,1
execution,1
obj:,1
'string',1
digits,1
1*metre;,1
\Some(Right<string,\,1
\name="\tryDel"\>TryAsync\,1
<returns>`OptionUnsafe&lt;Try&lt;C&gt;&gt;`,1
0.IsDefault(),1
appears,1
Option<T></returns>,1
W,1
biased,1
`append`,1
\(Metres,\,1
tryadd.Map(r,1
\lexeme,\,1
w,1
specified.</returns>,1
subsections,1
acceleration,1
following:,1
modulus:,1
non-matched,1
`State`,1
makeTokenParser(langDef),1
MonadState,1
Assert.True(rdr(2).IsBottom);,1
<returns>`Try&lt;Set&lt;C&gt;&gt;`,1
big,1
mb(output.State);,1
naturals,1
kelvin,1
Char,1
\Seq.span(Seq(1,2,3,4,1,2,3,4),\,1
\name="\R"\>Bound\,1
'world',1
<returns>`TryAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,1
validating,1
leave,1
a(),1
<returns>`TryAsync&lt;Seq&lt;C&gt;&gt;`,1
\name="\A"\>Enumerable\,1
<returns>TryOptionResult</returns>,1
ReaderTryOptionLinqTest(),1
optTask.IfNone(0.AsTask());,1
\parens(expr),\,1
couldn't,1
(0-F,1
\name="\message"\>ApplicationException\,1
below,1
Boolean,1
\"\(null)"\\,1
<returns>`OptionAsync&lt;TryOption&lt;C&gt;&gt;`,1
Helps,1
10*m2;,1
<returns>`Option&lt;Try&lt;C&gt;&gt;`,1
CLR,1
\(Milliseconds,\,1
ApplOptionAsync,1
looking,1
unchanged.),1
\mopt.FoldT("\"\,\,1
Compiler,1
built,1
ma(unit);,1
\name="\bytesCount"\>number\,1
How,1
7*minute;,1
super-fast,1
Deals,1
SeqEnumerable,1
\COM,\,1
\name="\den"\>Denominator</param>\,1
<returns>`Lst&lt;Try&lt;C&gt;&gt;`,1
Int32.MaxValue,1
monies,1
\sb.Append("\,\,1
\Option<int>,\,1
`Option<A>`):,1
<returns>`TryOptionAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,1
Times,1
Banking.Schema.Constructors,1
\Assert.True(x("\everyone"\).Value().Output.Head()\,1
<returns>`HashSet&lt;Try&lt;C&gt;&gt;`,1
concurrently</returns>,1
lst.MapT(x,1
\enumerable,\,1
h1;,1
<returns>`OptionAsync&lt;Try&lt;C&gt;&gt;`,1
BiFunctor</typeparam>,1
convertible,1
Some(30),1
\'-\',1
Using,1
nullables,1
\name="\TYPE"\></typeparam>\,1
ScriptParser,1
friendly,1
throw</param>,1
incidentally,1
\Range(0,\,1
mbFinish,1
obviously,1
Term,1
mlst.Match(,1
assumed,1
450);,1
7*kilometre2;,1
either(,1
Result,1
\name="\ReadOnlyKey"\>Key</param>\,1
100*centimeters;,1
\Hello(x).Map(MReader<string,\,1
information),1
f;,1
1*centimeter;,1
w),1
access,1
Decrements,1
\Func<int,\,1
\`==`,\,1
`Option.None`,1
arrays,1
<returns>`TryAsync&lt;Seq&lt;A&gt;&gt;`</returns>,1
<returns>`Task&lt;Seq&lt;C&gt;&gt;`,1
<returns>`IEnumerable&lt;Arr&lt;C&gt;&gt;`,1
deposit,1
Short,1
<returns>`TryOptionAsync&lt;Option&lt;C&gt;&gt;`,1
`Seq<A>`,1
buffer,1
\AssemblyVersion("\1.0.*"\)]\,1
Serialisation,1
<returns>`TryAsync&lt;Set&lt;C&gt;&gt;`,1
<returns>`Try&lt;Seq&lt;C&gt;&gt;`,1
\Lst<Option<int>>,\,1
10*meter2;,1
Bool,1
playing,1
parens(p),1
\term,\,1
\Lst<Task<TryAsync>>,\,1
finalised,1
commaSep(p),1
Assert.True(list[5],1
\name="\v1"\>The\,1
thier,1
<returns>`TryOption&lt;HashSet&lt;C&gt;&gt;`,1
FilterTTest(),1
\(a,\,1
\EitherUnsafe<_,\,1
Option<T>,1
\Assert.True(res.LiftT("\World"\).IsNone);\,1
7*kilometers;,1
fires,1
\Comparer<A>.Default.Compare(a,b)\,1
FoldBackRec,1
<returns>Either</returns>,1
<returns>`TryOptionAsync&lt;HashSet&lt;C&gt;&gt;`,1
`[]`,1
<returns>`OptionAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,1
\`<=`,\,1
<returns>`TryAsync&lt;Option&lt;C&gt;&gt;`,1
number;,1
better/more-descriptive,1
np)`,1
purpose,1
\"\Hello"\;\,1
\name="\FLOATING"\>Floating\,1
suite,1
`EqString`,1
&lt;=,1
<returns>`TryOptionAsync&lt;Arr&lt;C&gt;&gt;`,1
in-memory,1
user-defined,1
OptionalSetAppend(),1
\does,\,1
6));,1
(Default,1
<returns>`Set&lt;TryOption&lt;C&gt;&gt;`,1
string>.Inst.Return),1
if(All.Count,1
leftovers,1
\number,\,1
Hello2(Error())),1
\List(1,\,1
\RWS<MonoidW,\,1
LanguageExt.Parsec,1
VelocitySquared,1
Eliminate,1
HeadOrNone(),1
credits,1
\editor,\,1
<returns>Option,1
withdraws,1
ReaderTryErrorLinqTest(),1
<returns>`Lst&lt;Lst&lt;C&gt;&gt;`,1
Task<OptionData<B>>,1
1000,1
`TryAsync`:,1
<returns>`TryOptionAsync&lt;OptionAsync&lt;A&gt;&gt;`</returns>,1
_composition,1
`value,1
\name="\w"\>Writer\,1
\Seconds,\,1
Base64,1
curried(a)(b)(c)(d),1
\EqualityComparer<A>.Default.Equals(a,b)\,1
\"\."\\,1
<returns>`Option&lt;Option&lt;C&gt;&gt;`,1
denominator,1
TryAsync<A>((),1
represeting,1
OptionAsync<B>.Some)).data;,1
allowing,1
\int>("\left"\));\,1
<returns>`OptionAsync&lt;Option&lt;C&gt;&gt;`,1
<returns>`Task&lt;TryAsync&lt;A&gt;&gt;`</returns>,1
right-hand,1
crediting,1
OptionUnsafe</returns>,1
represented,1
rdr,1
<returns>`Set&lt;OptionUnsafe&lt;C&gt;&gt;`,1
inta,1
\retry,\,1
increment</param>,1
Transform&lt;A&gt;,1
<returns>`Task&lt;Lst&lt;A&gt;&gt;`</returns>,1
arbitrarily,1
isDefault(0),1
\"\Hello,\,1
version*/);,1
<returns>`Task&lt;Lst&lt;C&gt;&gt;`,1
\-2,\,1
Change,1
[Eq(typeof(EqJObject))],1
FloatType(x),1
ma(state);,1
injecting,1
suppressions,1
floats,1
<returns>`TryOptionAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,1
\before,\,1
<returns>`Option&lt;TryOption&lt;C&gt;&gt;`,1
post,1
changes,1
Assert.True(set.Count,1
whiteSpace,1
\"\0X"\\,1
<returns>`TryOptionAsync&lt;Set&lt;C&gt;&gt;`,1
parameteridable,1
\Some(Set(2,3,4));\,1
needs!!!),1
OptionalAsync,1
<returns>`Option&lt;Arr&lt;C&gt;&gt;`,1
\(Seq(1,2,3),\,1
\Seq(3,4,1,2,3,4))\,1
\name="\FLOATING"\>Num\,1
<returns>Modified,1
Some(T,1
invokes,1
<returns>`Task&lt;Option&lt;C&gt;&gt;`,1
<returns>`Try&lt;HashSet&lt;C&gt;&gt;`,1
Factory,1
it</returns>,1
right.Greater,1
confirm,1
30,1
7*hour;,1
sublist,1
Result:,1
c);,1
Implicitly,1
\`<`,\,1
OptionAsync<T></returns>,1
sometimes,1
\applicative,\,1
executed,1
Numerical,1
<returns>`TryOption&lt;Set&lt;C&gt;&gt;`,1
curried(a)(b)(c)(d)(e)(f)(g)(h),1
mopt,1
/*,1
ma(unit).Result;,1
System.Single,1
interacting,1
start-up,1
res);,1
\(negative,\,1
obj,1
algorithms,1
Valid,1
<returns>`OptionUnsafe&lt;Option&lt;C&gt;&gt;`,1
<returns>`TryAsync&lt;Arr&lt;A&gt;&gt;`</returns>,1
person's,1
Last,1
braces(p),1
\Monad<S,\,1
Java,1
7*min;,1
another:,1
Matching,1
<returns>Ratio,1
item(c),1
\"\ABCDEABCDEABCDE"\,\,1
.Lift();,1
lst.CountT());,1
\World"\);\,1
Block,1
System.Globalization.NumberStyles.Integer,1
satisfies,1
leading,1
Assert.True(opt.CountT(),1
Many,1
1.MetresPerSecond2(),1
interaction,1
\add),\,1
\`>=`,\,1
data-structure,1
baseValue:,1
7*sec;,1
Assert.True(rdr(10),1
conjunction,1
string</returns>,1
If(this.field,1
Parsers,1
metres^2,1
<returns>`HashSet&lt;Arr&lt;C&gt;&gt;`,1
generating,1
abstract,1
makeTokenParser(language),1
mlst.CountT());,1
<returns>`TryAsync&lt;Option&lt;A&gt;&gt;`</returns>,1
.ParMap(add),1
7*ms;,1
<returns>`Task&lt;Set&lt;C&gt;&gt;`,1
many,1
\name="\p"\></param>\,1
require,1
100*cm2;,1
7*minutes;,1
\"\,"\\,1
<returns>`Task&lt;Try&lt;A&gt;&gt;`</returns>,1
\member,\,1
<returns>`Lst&lt;Seq&lt;C&gt;&gt;`,1
<returns>`HashSet&lt;Seq&lt;C&gt;&gt;`,1
thus,1
supports,1
\State<S,A>\,1
Generic,1
invalid,1
Makes,1
<returns>`OptionAsync&lt;TryAsync&lt;A&gt;&gt;`</returns>,1
having,1
\],\,1
hit,1
let,1
Transformation,1
3));,1
<returns>`Seq&lt;Set&lt;C&gt;&gt;`,1
sliced,1
Celcius,1
10*meters;,1
numbered,1
<returns>`HashSet&lt;HashSet&lt;C&gt;&gt;`,1
\'d',\,1
instantiated,1
\None),\,1
<returns>`Arr&lt;OptionUnsafe&lt;C&gt;&gt;`,1
\name="\Seq"\>Match\,1
closest,1
velocities,1
\sb.Append("\null"\)\,1
White,1
Final,1
(x)</c>.</returns>,1
Assert.True(mopt.CountT(),1
<returns>`IEnumerable&lt;OptionUnsafe&lt;C&gt;&gt;`,1
\`transform(m,\,1
Assert.True(rdr(2),1
PersonName,1
2),1
encoded,1
(multi,1
uppercase,1
2900-2099,1
<returns>`TryOptionAsync&lt;Try&lt;C&gt;&gt;`,1
str(name),1
_compositions,1
reaching,1
WeakReference<OnFinalise<...>>,1
\name="\value"\>A\,1
<returns>`OptionAsync&lt;TryOption&lt;A&gt;&gt;`</returns>,1
\"\;"\\,1
/after/,1
MLst,1
\either(letter,char('_'))\,1
\Task<EitherData<A,\,1
optTask,1
occured,1
(lexeme),1
<returns>`TryOption&lt;Seq&lt;C&gt;&gt;`,1
<returns>`TryOptionAsync&lt;TryOptionAsync&lt;A&gt;&gt;`</returns>,1
https://github.com/louthy/language-ext/issues/207,1
`Task<A>`,1
<returns>`OptionUnsafe&lt;Set&lt;C&gt;&gt;`,1
\"\ABCDE"\);\,1
stop,1
AccountNames,1
1.IsDefault(),1
vulnerable,1
(\n),1
\VectorClocks,\,1
parsing,1
Increments,1
10*metres;,1
Assert.True(list[3],1
safety,1
Assert.True(mbFinish,1
<returns>`TryOption&lt;Try&lt;C&gt;&gt;`,1
TBoolBool,1
Concat,1
\lst.FoldT("\"\,\,1
CreditCard,1
IO,1
Stops,1
\mlst.FoldT("\"\,\,1
<returns>`Option&lt;OptionUnsafe&lt;C&gt;&gt;`,1
Embed,1
<returns>`Arr&lt;Option&lt;C&gt;&gt;`,1
\R,\,1
\name="\PRED"\>Predicate\,1
\databases,\,1
route,1
ApplicationException</returns>,1
Millimeters,1
curried(a)(b)(c),1
1*meter;,1
<returns>`Set&lt;Set&lt;C&gt;&gt;`,1
<returns>`Option&lt;Set&lt;C&gt;&gt;`,1
`Se`,1
little-endian,1
TryOption</returns>,1
\definition,\,1
Ignore,1
taskOpt.Sequence();,1
`state`,1
demonstrates,1
transactions,1
human,1
\`append(q,\,1
Combines,1
checks:,1
`MOption<A>`,1
Every,1
debitting,1
<returns>`TryOptionAsync&lt;Lst&lt;C&gt;&gt;`,1
imports,1
Sq,1
Assert.True(list[2],1
\name="\T"\>Array\,1
7*milliseconds;,1
Assert.True(set.Contains(3));,1
described,1
coerced,1
255,1
\failwith<Unit>("\more!"\)\,1
'skipMany',1
\parenthesis,\,1
A),1
compute,1
SequenceFlip(),1
<returns>`Task&lt;Arr&lt;A&gt;&gt;`</returns>,1
WeakDict,1
<returns>`Try&lt;Try&lt;C&gt;&gt;`,1
`Task<MA>`,1
\right-associativity,\,1
later,1
NumType(x),1
faster,1
`ma(state)`,1
dot,1
<returns>`Task&lt;IEnumerable&lt;A&gt;&gt;`</returns>,1
\Lst<T>(Root,\,1
monoid</typeparam>,1
*fields(,1
7*s;,1
singly,1
\"\*\"\\,1
<returns>Value,1
\"\)\,1
table.NumberDescription-1The,1
<returns>`TryOptionAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,1
Assert.True(b[3],1
m(),1
EqString),1
overloads,1
ch(c),1
initialised,1
fits,1
TODO,1
S(BBS)(KK),1
separator,1
acts,1
remote,1
TimeSpan,1
Assert.False(true),1
unary,1
r2,1
things,1
\"\//"\\,1
<returns>`Seq&lt;Lst&lt;C&gt;&gt;`,1
<returns>`OptionAsync&lt;Try&lt;A&gt;&gt;`</returns>,1
\either(alphaNum,\,1
Delegate,1
.Apply(None),1
<returns>`TryAsync&lt;HashSet&lt;C&gt;&gt;`,1
Assert.True(b[2],1
mutable,1
\(a,b)\,1
Assert.True(a[2],1
'cases':,1
<returns>`Task&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,1
interact,1
v;,1
Major,1
def.CaseSensitive,1
Placeholder,1
\tell("\Hello\,1
\approach,\,1
PostSubscribe((),1
transitive,1
help,1
<returns>`TryAsync&lt;HashSet&lt;A&gt;&gt;`</returns>,1
isDefault(1),1
\(`State`,\,1
Assert.True(r3,1
cardHolder,1
opt.MapT(x,1
Ratio,1
TryHigherKind();,1
dimensionless,1
<returns>`TryAsync&lt;IEnumerable&lt;A&gt;&gt;`</returns>,1
\Either<_,\,1
<returns>`Task&lt;Arr&lt;C&gt;&gt;`,1
!Rev);,1
Assert.True(a[5],1
Minor,1
int>(100));,1
//List.head(mopt),1
Assert.True(c[3],1
\apply(parmap(SomeUnsafe(3),\,1
\>,\,1
\(Seq(),\,1
<returns>`Lst&lt;OptionUnsafe&lt;C&gt;&gt;`,1
inherited,1
Code,1
areas,1
o,1
Memoise,1
Vector,1
Velocity,1
\res3.LiftUnsafe("\World"\).IfSome(x\,1
(one,1
`Elem`,1
create,1
store,1
<returns>`Lst&lt;Arr&lt;C&gt;&gt;`,1
what's,1
declarative,1
null`,1
b)`,1
(inclusive),1
\opt.FoldT("\"\,\,1
<returns>`TryOption&lt;OptionUnsafe&lt;C&gt;&gt;`,1
Testing,1
\(a,b,c,xs)\,1
`m`,1
\name="\MonoidOrdA"\>Monoid\,1
\B>.Left,\,1
clear,1
<returns>`Arr&lt;Try&lt;C&gt;&gt;`,1
curried(a)(b)(c)(d)(e)(f)(g),1
Setting,1
overs,1
EitherUnsafeUnsafe,1
\oneOf("\:!#$%&*+.\/\<=>?\@\\\\^|-~"\)\,1
\"\Parsec.Text.Language"\\,1
ma(unit),1
below:,1
<returns>`Try&lt;Option&lt;C&gt;&gt;`,1
isnull(x),1
<returns>`TryAsync&lt;Lst&lt;A&gt;&gt;`</returns>,1
throws</returns>,1
sb.ToString(),1
Validate,1
updated,1
Assert.True(a[3],1
wonderful,1
'*',1
'higher,1
finaliser,1
kind:,1
res3,1
\"\Expected\,1
\-3,\,1
1*millimeter;,1
object),1
'System.Char.IsWhiteSpace'),1
\toEitherUnsafeAsync<CHOICE,\,1
(\r),1
DateTime,1
\namespace,\,1
<returns>`OptionAsync&lt;Lst&lt;C&gt;&gt;`,1
ApplyNoneArgs(),1
`new`,1
7*mins;,1
\default(MONADB).BindReturn((sa,\,1
state:,1
Stck,1
z.LiftT();,1
Assert.True(list.Count,1
'drop',1
struct</returns>,1
\'+\'),1
List(,1
<returns>`TryOptionAsync&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>,1
\name="\O"\>Parsed\,1
CombineAndOrder,1
isnull(y),1
O(1),1
Option<A>>,1
x.ToString();,1
Some(A),1
7*kilometer2;,1
waits,1
fact,1
Option<Task<int>>,1
colon,1
<returns>`OptionAsync&lt;OptionUnsafe&lt;C&gt;&gt;`,1
mlst,1
CRLF,1
m(i));,1
hash-codes,1
accounts,1
<returns>`OptionUnsafe&lt;TryOption&lt;C&gt;&gt;`,1
TryReaderBindTest(),1
<returns>`OptionAsync&lt;Arr&lt;A&gt;&gt;`</returns>,1
compilation,1
Okay,1
Long,1
tree_,1
validToday,1
independent,1
WrappedEitherLinqTest(),1
typical,1
<returns>`TryOptionAsync&lt;Task&lt;A&gt;&gt;`</returns>,1
ApplicativeLawHoldsF(),1
<returns>`Set&lt;Arr&lt;C&gt;&gt;`,1
<returns>`Task&lt;Seq&lt;A&gt;&gt;`</returns>,1
modify</param>,1
forces,1
<returns>`TryOptionAsync&lt;Set&lt;A&gt;&gt;`</returns>,1
Edit.Insert,1
\name="\Sequence"\>Match\,1
Assert.True(c[2],1
\failwith<Unit>("\one\,1
Parameters,1
logarithmic,1
\Ord<(bool,\,1
OptionAsync<B>,1
\Run(Func<S,\,1
[assembly:,1
\`Skip`,\,1
<returns>`Set&lt;Seq&lt;C&gt;&gt;`,1
assemblies,1
Append(')'),1
\Run(Func<Unit,\,1
lifted</typeparam>,1
<returns>`OptionUnsafe&lt;Lst&lt;C&gt;&gt;`,1
flattens,1
optTask.Sequence();,1
copies,1
Assert.True(c[1],1
\conflicts,\,1
\(`IComparable`),\,1
\`(np,\,1
SomeUnsafe(3),1
o.FilterT(n,1
summing,1
fractExponent(n),1
\identifier,\,1
ApplySomeArgs(),1
f(generator())</returns>,1
numerator,1
Liftable,1
<returns>`Try&lt;OptionUnsafe&lt;C&gt;&gt;`,1
\name="\Right"\>Value\,1
\name="\obj"\></param>\,1
_both_,1
\Y,\,1
\name="\OuterMonad"\></typeparam>\,1
<returns>`OptionAsync&lt;Arr&lt;C&gt;&gt;`,1
Project-level,1
\name="\transaction"\>Transaction\,1
z),1
\name="\exp"\>The\,1
accelerations,1
(any,1
<returns>`IEnumerable&lt;Lst&lt;C&gt;&gt;`,1
\info.GetValue("\field-name"\,\,1
\Some(Left<string,\,1
<returns>`TryAsync&lt;Lst&lt;C&gt;&gt;`,1
<returns>`TryOptionAsync&lt;OptionUnsafe&lt;C&gt;&gt;`,1
<returns>`TryOptionAsync&lt;Try&lt;A&gt;&gt;`</returns>,1
(treble,1
